/**
 * BoilerAI Client Library
 * Simple JavaScript client for integrating BoilerAI into existing websites
 * 
 * Usage:
 * const boilerAI = new BoilerAI('http://localhost:3001');
 * const response = await boilerAI.chat('What courses do I need for MI track?');
 */

class BoilerAI {
    constructor(apiUrl = 'http://localhost:3001') {
        this.apiUrl = apiUrl.replace(/\/$/, ''); // Remove trailing slash
        this.sessionId = this.generateSessionId();
        this.isHealthy = false;
        
        // Check connection on initialization
        this.checkHealth();
    }
    
    /**
     * Generate unique session ID
     */
    generateSessionId() {
        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
    
    /**
     * Check if BoilerAI API is healthy
     */
    async checkHealth() {
        try {
            const response = await fetch(`${this.apiUrl}/api/health`);
            const data = await response.json();
            this.isHealthy = data.status === 'healthy';
            return this.isHealthy;
        } catch (error) {
            console.warn('BoilerAI health check failed:', error.message);
            this.isHealthy = false;
            return false;
        }
    }
    
    /**
     * Send a message to BoilerAI and get response
     * @param {string} message - User's question
     * @param {string} customSessionId - Optional custom session ID
     * @returns {Promise<object>} Response object
     */
    async chat(message, customSessionId = null) {
        if (!message || typeof message !== 'string') {
            throw new Error('Message must be a non-empty string');
        }
        
        if (message.length > 1000) {
            throw new Error('Message too long (max 1000 characters)');
        }
        
        const sessionId = customSessionId || this.sessionId;
        
        try {
            const response = await fetch(`${this.apiUrl}/api/chat`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message.trim(),
                    session_id: sessionId
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.error || 'Unknown error from BoilerAI');
            }
            
            // Update session ID if it was generated by server
            if (data.session_id) {
                this.sessionId = data.session_id;
            }
            
            return {
                success: true,
                message: data.response,
                sessionId: data.session_id,
                timestamp: data.timestamp
            };
            
        } catch (error) {
            console.error('BoilerAI chat error:', error);
            
            return {
                success: false,
                error: error.message,
                message: 'Sorry, I\'m having trouble connecting to BoilerAI right now. Please try again later.'
            };
        }
    }
    
    /**
     * Get BoilerAI system information
     */
    async getInfo() {
        try {
            const response = await fetch(`${this.apiUrl}/api/info`);
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Failed to get BoilerAI info:', error);
            return null;
        }
    }
    
    /**
     * Reset session (start fresh conversation)
     */
    resetSession() {
        this.sessionId = this.generateSessionId();
    }
    
    /**
     * Simple chatbot widget for quick integration
     * @param {string} containerId - ID of container element
     * @param {object} options - Configuration options
     */
    createWidget(containerId, options = {}) {
        const container = document.getElementById(containerId);
        if (!container) {
            throw new Error(`Container with ID '${containerId}' not found`);
        }
        
        const config = {
            title: 'BoilerAI',
            subtitle: 'CS Academic Advisor',
            placeholder: 'Ask about CS courses, tracks, planning...',
            height: '400px',
            ...options
        };
        
        container.innerHTML = `
            <div style="
                border: 1px solid #ddd;
                border-radius: 8px;
                height: ${config.height};
                display: flex;
                flex-direction: column;
                background: white;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            ">
                <div style="
                    background: linear-gradient(135deg, #B5651D, #C6A558);
                    color: white;
                    padding: 12px 16px;
                    border-radius: 8px 8px 0 0;
                    font-weight: 600;
                ">
                    ðŸ¤– ${config.title}
                    <div style="font-size: 12px; opacity: 0.9; font-weight: normal;">
                        ${config.subtitle}
                    </div>
                </div>
                
                <div id="${containerId}-messages" style="
                    flex: 1;
                    overflow-y: auto;
                    padding: 16px;
                    background: #f8f9fa;
                ">
                    <div style="
                        text-align: center;
                        color: #666;
                        font-size: 14px;
                        padding: 20px;
                    ">
                        ðŸ‘‹ Hi! I'm BoilerAI, your Purdue CS academic advisor.<br>
                        Ask me about courses, tracks, or graduation planning!
                    </div>
                </div>
                
                <div style="
                    padding: 12px;
                    border-top: 1px solid #eee;
                    display: flex;
                    gap: 8px;
                ">
                    <input 
                        type="text" 
                        id="${containerId}-input"
                        placeholder="${config.placeholder}"
                        style="
                            flex: 1;
                            padding: 8px 12px;
                            border: 1px solid #ddd;
                            border-radius: 20px;
                            outline: none;
                            font-size: 14px;
                        "
                        maxlength="500"
                    />
                    <button 
                        id="${containerId}-send"
                        style="
                            background: #007bff;
                            color: white;
                            border: none;
                            border-radius: 50%;
                            width: 36px;
                            height: 36px;
                            cursor: pointer;
                            font-size: 14px;
                        "
                    >
                        âž¤
                    </button>
                </div>
            </div>
        `;
        
        // Add event listeners
        const input = document.getElementById(`${containerId}-input`);
        const sendBtn = document.getElementById(`${containerId}-send`);
        const messages = document.getElementById(`${containerId}-messages`);
        
        const addMessage = (text, isUser = false) => {
            const messageDiv = document.createElement('div');
            messageDiv.style.cssText = `
                margin-bottom: 12px;
                max-width: 80%;
                padding: 8px 12px;
                border-radius: 12px;
                font-size: 14px;
                line-height: 1.4;
                ${isUser ? `
                    background: #007bff;
                    color: white;
                    margin-left: auto;
                    text-align: right;
                ` : `
                    background: white;
                    color: #333;
                    border: 1px solid #ddd;
                `}
            `;
            messageDiv.textContent = text;
            messages.appendChild(messageDiv);
            messages.scrollTop = messages.scrollHeight;
        };
        
        const sendMessage = async () => {
            const message = input.value.trim();
            if (!message) return;
            
            // Add user message
            addMessage(message, true);
            input.value = '';
            sendBtn.disabled = true;
            
            // Show typing indicator
            const typingDiv = document.createElement('div');
            typingDiv.id = 'typing';
            typingDiv.style.cssText = `
                font-style: italic;
                color: #666;
                font-size: 13px;
                padding: 8px 12px;
            `;
            typingDiv.textContent = 'BoilerAI is thinking...';
            messages.appendChild(typingDiv);
            messages.scrollTop = messages.scrollHeight;
            
            // Get response
            const response = await this.chat(message);
            
            // Remove typing indicator
            const typing = document.getElementById('typing');
            if (typing) typing.remove();
            
            // Add bot response
            addMessage(response.message);
            sendBtn.disabled = false;
            input.focus();
        };
        
        sendBtn.addEventListener('click', sendMessage);
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendMessage();
            }
        });
        
        // Focus input
        input.focus();
    }
}

// Export for different environments
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BoilerAI; // Node.js
} else if (typeof window !== 'undefined') {
    window.BoilerAI = BoilerAI; // Browser
}