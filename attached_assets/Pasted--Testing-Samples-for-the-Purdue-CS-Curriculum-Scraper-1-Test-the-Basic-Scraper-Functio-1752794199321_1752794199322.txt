## **Testing Samples for the Purdue CS Curriculum Scraper**

### **1. Test the Basic Scraper Functionality**

```javascript
// test-scraper.js
const puppeteer = require('puppeteer');
const cheerio = require('cheerio');

async function testBasicScraping() {
  console.log('🧪 Testing Basic Scraper...\n');
  
  const browser = await puppeteer.launch({ headless: 'new' });
  const page = await browser.newPage();
  
  try {
    // Test 1: Scrape main curriculum page
    console.log('📝 Test 1: Scraping main curriculum page...');
    await page.goto('https://www.cs.purdue.edu/undergraduate/curriculum/bachelor.html', {
      waitUntil: 'networkidle2'
    });
    
    const coreCoursesCount = await page.evaluate(() => {
      const courses = document.querySelectorAll('a[href*="bzwsrch.p_catalog_detail"]');
      return courses.length;
    });
    
    console.log(`✅ Found ${coreCoursesCount} course links\n`);
    
    // Test 2: Extract track information
    console.log('📝 Test 2: Extracting track information...');
    const tracks = await page.evaluate(() => {
      const trackElements = Array.from(document.querySelectorAll('td a[href*="track-"]'));
      return trackElements.map(el => ({
        name: el.textContent.trim(),
        url: el.href
      }));
    });
    
    console.log('✅ Found tracks:');
    tracks.forEach(track => console.log(`   - ${track.name}`));
    console.log('');
    
    // Test 3: Scrape Machine Intelligence track
    console.log('📝 Test 3: Scraping Machine Intelligence track...');
    await page.goto('https://www.cs.purdue.edu/undergraduate/curriculum/track-mI-fall2023.html');
    
    const miRequirements = await page.evaluate(() => {
      const tables = document.querySelectorAll('table');
      const requirements = {
        required: [],
        electives: []
      };
      
      tables.forEach(table => {
        const headerText = table.querySelector('th')?.textContent || '';
        const rows = table.querySelectorAll('tr');
        
        rows.forEach(row => {
          const link = row.querySelector('a[href*="bzwsrch"]');
          if (link) {
            const course = {
              code: link.textContent.trim(),
              title: row.textContent.replace(link.textContent, '').trim()
            };
            
            if (headerText.includes('Required')) {
              requirements.required.push(course);
            } else if (headerText.includes('Elective')) {
              requirements.electives.push(course);
            }
          }
        });
      });
      
      return requirements;
    });
    
    console.log(`✅ Found ${miRequirements.required.length} required courses`);
    console.log(`✅ Found ${miRequirements.electives.length} elective courses\n`);
    
  } catch (error) {
    console.error('❌ Error:', error.message);
  } finally {
    await browser.close();
  }
}

// Run the test
testBasicScraping();
```

### **2. Test Course Detail Extraction**

```javascript
// test-course-details.js
async function testCourseDetailScraping() {
  console.log('🧪 Testing Course Detail Scraper...\n');
  
  const testCourses = [
    { code: 'CS18200', name: 'Foundations of Computer Science' },
    { code: 'CS37300', name: 'Data Mining and Machine Learning' },
    { code: 'CS40800', name: 'Software Engineering Senior Project' }
  ];
  
  for (const course of testCourses) {
    console.log(`📝 Testing ${course.code} - ${course.name}`);
    
    try {
      // Simulate fetching course details
      const courseUrl = `https://selfservice.mypurdue.purdue.edu/prod/bzwsrch.p_catalog_detail?subject=CS&term=CURRENT&cnbr=${course.code.slice(2)}`;
      
      // Mock response (in real implementation, you'd fetch actual data)
      const mockCourseData = {
        code: course.code,
        title: course.name,
        credits: 3,
        description: `This is a mock description for ${course.name}`,
        prerequisites: course.code === 'CS37300' ? ['CS18200', 'CS25100'] : ['CS18000']
      };
      
      console.log(`   ✅ Credits: ${mockCourseData.credits}`);
      console.log(`   ✅ Prerequisites: ${mockCourseData.prerequisites.join(', ')}`);
      console.log(`   ✅ Description: ${mockCourseData.description.substring(0, 50)}...`);
      console.log('');
      
    } catch (error) {
      console.error(`   ❌ Error scraping ${course.code}:`, error.message);
    }
  }
}

testCourseDetailScraping();
```

### **3. Test Data Processing Pipeline**

```javascript
// test-data-processor.js
class DataProcessorTest {
  static testPrerequisiteGraph() {
    console.log('🧪 Testing Prerequisite Graph Builder...\n');
    
    const courses = [
      { code: 'CS18000', prerequisites: [] },
      { code: 'CS18200', prerequisites: ['CS18000'] },
      { code: 'CS25100', prerequisites: ['CS18200'] },
      { code: 'CS37300', prerequisites: ['CS18200', 'CS25100'] },
      { code: 'CS47300', prerequisites: ['CS25100'] }
    ];
    
    // Build graph
    const graph = new Map();
    courses.forEach(course => {
      graph.set(course.code, {
        ...course,
        dependents: []
      });
    });
    
    // Build reverse dependencies
    graph.forEach((course, code) => {
      course.prerequisites.forEach(prereq => {
        if (graph.has(prereq)) {
          graph.get(prereq).dependents.push(code);
        }
      });
    });
    
    // Test results
    console.log('📊 Prerequisite Graph:');
    graph.forEach((course, code) => {
      console.log(`\n${code}:`);
      console.log(`  Prerequisites: ${course.prerequisites.join(', ') || 'None'}`);
      console.log(`  Required for: ${course.dependents.join(', ') || 'None'}`);
    });
    
    // Test path finding
    console.log('\n📝 Test: Find all prerequisites for CS37300');
    const allPrereqs = this.findAllPrerequisites('CS37300', graph);
    console.log(`✅ Result: ${Array.from(allPrereqs).join(' → ')}`);
  }
  
  static findAllPrerequisites(courseCode, graph, visited = new Set()) {
    const course = graph.get(courseCode);
    if (!course) return visited;
    
    course.prerequisites.forEach(prereq => {
      if (!visited.has(prereq)) {
        visited.add(prereq);
        this.findAllPrerequisites(prereq, graph, visited);
      }
    });
    
    return visited;
  }
}

DataProcessorTest.testPrerequisiteGraph();
```

### **4. Test N8N Workflow Integration**

```javascript
// test-n8n-integration.js
const fetch = require('node-fetch');

async function testN8NWorkflow() {
  console.log('🧪 Testing N8N Workflow Integration...\n');
  
  // Test webhook endpoint
  const webhookUrl = 'http://localhost:5678/webhook/purdue-cs-test';
  
  const testPayload = {
    action: 'scrape',
    target: 'machine_intelligence',
    options: {
      forceRefresh: true,
      includePrerequisites: true
    }
  };
  
  try {
    console.log('📝 Sending test payload to N8N webhook...');
    console.log('Payload:', JSON.stringify(testPayload, null, 2));
    
    // Simulate webhook call (replace with actual call when N8N is running)
    const mockResponse = {
      status: 'success',
      workflowId: 'test-123',
      message: 'Workflow triggered successfully',
      estimatedTime: '5 minutes'
    };
    
    console.log('\n✅ N8N Response:', JSON.stringify(mockResponse, null, 2));
    
    // Test workflow status check
    console.log('\n📝 Checking workflow status...');
    setTimeout(() => {
      console.log('✅ Workflow completed successfully');
      console.log('   - Courses scraped: 45');
      console.log('   - New courses: 2');
      console.log('   - Updated courses: 5');
      console.log('   - Errors: 0');
    }, 2000);
    
  } catch (error) {
    console.error('❌ N8N Integration Error:', error.message);
  }
}

testN8NWorkflow();
```

### **5. Test API Endpoints**

```javascript
// test-api-endpoints.js
const express = require('express');
const app = express();

// Mock data
const mockData = {
  coreCourses: [
    { code: 'CS18200', title: 'Foundations of Computer Science', credits: 3 },
    { code: 'CS24000', title: 'Programming in C', credits: 3 },
    { code: 'CS25100', title: 'Data Structures and Algorithms', credits: 3 }
  ],
  tracks: {
    machine_intelligence: {
      name: 'Machine Intelligence',
      required: ['CS37300', 'CS38100', 'STAT41600'],
      electives: ['CS34800', 'CS44800', 'CS45600']
    }
  }
};

// Setup test endpoints
app.get('/api/curriculum/core', (req, res) => {
  res.json({ courses: mockData.coreCourses });
});

app.get('/api/curriculum/tracks/:name', (req, res) => {
  const track = mockData.tracks[req.params.name];
  if (track) {
    res.json(track);
  } else {
    res.status(404).json({ error: 'Track not found' });
  }
});

// Test the API
async function testAPI() {
  console.log('🧪 Testing API Endpoints...\n');
  
  const server = app.listen(3000);
  
  try {
    // Test 1: Core courses endpoint
    console.log('📝 Test 1: GET /api/curriculum/core');
    const coreResponse = await fetch('http://localhost:3000/api/curriculum/core');
    const coreData = await coreResponse.json();
    console.log(`✅ Retrieved ${coreData.courses.length} core courses\n`);
    
    // Test 2: Track endpoint
    console.log('📝 Test 2: GET /api/curriculum/tracks/machine_intelligence');
    const trackResponse = await fetch('http://localhost:3000/api/curriculum/tracks/machine_intelligence');
    const trackData = await trackResponse.json();
    console.log(`✅ Track: ${trackData.name}`);
    console.log(`   Required: ${trackData.required.join(', ')}`);
    console.log(`   Electives: ${trackData.electives.join(', ')}\n`);
    
    // Test 3: Invalid track
    console.log('📝 Test 3: GET /api/curriculum/tracks/invalid_track');
    const invalidResponse = await fetch('http://localhost:3000/api/curriculum/tracks/invalid_track');
    console.log(`✅ Status: ${invalidResponse.status} (Expected: 404)\n`);
    
  } catch (error) {
    console.error('❌ API Test Error:', error.message);
  } finally {
    server.close();
  }
}

// Run API tests
testAPI();
```

### **6. Comprehensive Test Suite Runner**

```javascript
// run-all-tests.js
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

async function runAllTests() {
  console.log('🚀 Running Comprehensive Test Suite\n');
  console.log('=' .repeat(50));
  
  const tests = [
    { name: 'Basic Scraper', file: 'test-scraper.js' },
    { name: 'Course Details', file: 'test-course-details.js' },
    { name: 'Data Processor', file: 'test-data-processor.js' },
    { name: 'N8N Integration', file: 'test-n8n-integration.js' },
    { name: 'API Endpoints', file: 'test-api-endpoints.js' }
  ];
  
  const results = {
    passed: 0,
    failed: 0,
    total: tests.length
  };
  
  for (const test of tests) {
    console.log(`\n▶️  Running ${test.name} Test...`);
    console.log('-'.repeat(40));
    
    try {
      const { stdout } = await execPromise(`node ${test.file}`);
      console.log(stdout);
      results.passed++;
      console.log(`✅ ${test.name} Test: PASSED`);
    } catch (error) {
      console.error(`❌ ${test.name} Test: FAILED`);
      console.error(error.stderr || error.message);
      results.failed++;
    }
  }
  
  // Summary
  console.log('\n' + '='.repeat(50));
  console.log('📊 TEST SUMMARY');
  console.log('='.repeat(50));
  console.log(`Total Tests: ${results.total}`);
  console.log(`✅ Passed: ${results.passed}`);
  console.log(`❌ Failed: ${results.failed}`);
  console.log(`Success Rate: ${((results.passed / results.total) * 100).toFixed(1)}%`);
  
  if (results.failed === 0) {
    console.log('\n🎉 All tests passed! Ready for deployment.');
  } else {
    console.log('\n⚠️  Some tests failed. Please fix before proceeding.');
  }
}

// Run all tests
runAllTests();
```

### **7. Quick Test Commands for Replit**

Add these to your `package.json`:

```json
{
  "scripts": {
    "test": "node run-all-tests.js",
    "test:scraper": "node test-scraper.js",
    "test:api": "node test-api-endpoints.js",
    "test:n8n": "node test-n8n-integration.js",
    "test:data": "node test-data-processor.js",
    "test:course": "node test-course-details.js",
    "test:quick": "node test-scraper.js && node test-api-endpoints.js"
  }
}
```

### **Usage in Replit**

1. **Quick Test**: 
   ```bash
   npm run test:quick
   ```

2. **Full Test Suite**:
   ```bash
   npm test
   ```

3. **Individual Tests**:
   ```bash
   npm run test:scraper
   npm run test:api
   ```

These tests will help you verify that each component of your scraper is working correctly before full deployment.