# Complete Knowledge Graph Population System

## System Overview
This system populates your NetworkX knowledge graph with comprehensive Purdue CS program data, including courses, prerequisites, tracks, professors, and academic policies. It creates a complete academic knowledge base for specific advising.

## 1. Knowledge Graph Builder

### A. Complete CS Program Data Structure
```python
import networkx as nx
import json
import sqlite3
from datetime import datetime
import logging

class PurdueCSKnowledgeGraphBuilder:
    def __init__(self):
        self.graph = nx.DiGraph()
        self.logger = self.setup_logger()
        self.cs_program_data = self.load_complete_program_data()
        
    def setup_logger(self):
        """Setup logging for graph building"""
        logger = logging.getLogger('GraphBuilder')
        logger.setLevel(logging.INFO)
        handler = logging.StreamHandler()
        formatter = logging.Formatter('🔧 %(levelname)s: %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        return logger
    
    def load_complete_program_data(self) -> dict:
        """Load complete Purdue CS program data"""
        return {
            'foundation_courses': {
                'CS 18000': {
                    'title': 'Problem Solving and Object-Oriented Programming',
                    'credits': 4,
                    'description': 'Introduction to Java programming, object-oriented concepts, and problem-solving techniques.',
                    'prerequisites': [],
                    'corequisites': ['MA 16100'],
                    'typical_semester': 'freshman_fall',
                    'offered_semesters': ['fall', 'spring', 'summer'],
                    'difficulty': 3.2,
                    'workload_hours': 12,
                    'required': True,
                    'course_type': 'foundation'
                },
                'CS 18200': {
                    'title': 'Foundations of Computer Science',
                    'credits': 3,
                    'description': 'Mathematical foundations including discrete mathematics, logic, and proof techniques.',
                    'prerequisites': ['CS 18000'],
                    'corequisites': [],
                    'typical_semester': 'freshman_spring',
                    'offered_semesters': ['fall', 'spring'],
                    'difficulty': 3.8,
                    'workload_hours': 10,
                    'required': True,
                    'course_type': 'foundation'
                },
                'CS 24000': {
                    'title': 'Programming in C',
                    'credits': 3,
                    'description': 'Introduction to C programming, memory management, and systems programming concepts.',
                    'prerequisites': ['CS 18000'],
                    'corequisites': [],
                    'typical_semester': 'freshman_spring',
                    'offered_semesters': ['fall', 'spring'],
                    'difficulty': 3.5,
                    'workload_hours': 11,
                    'required': True,
                    'course_type': 'foundation'
                },
                'CS 25000': {
                    'title': 'Computer Architecture',
                    'credits': 4,
                    'description': 'Computer organization, instruction sets, assembly language, and digital logic.',
                    'prerequisites': ['CS 18200', 'CS 24000'],
                    'corequisites': [],
                    'typical_semester': 'sophomore_fall',
                    'offered_semesters': ['fall', 'spring'],
                    'difficulty': 4.0,
                    'workload_hours': 13,
                    'required': True,
                    'course_type': 'foundation'
                },
                'CS 25100': {
                    'title': 'Data Structures',
                    'credits': 3,
                    'description': 'Linear and nonlinear data structures, algorithm analysis, and implementation.',
                    'prerequisites': ['CS 18200', 'CS 24000'],
                    'corequisites': [],
                    'typical_semester': 'sophomore_fall',
                    'offered_semesters': ['fall', 'spring'],
                    'difficulty': 4.1,
                    'workload_hours': 14,
                    'required': True,
                    'course_type': 'foundation'
                },
                'CS 25200': {
                    'title': 'Systems Programming',
                    'credits': 4,
                    'description': 'System-level programming, processes, memory management, and UNIX environment.',
                    'prerequisites': ['CS 25000', 'CS 25100'],
                    'corequisites': [],
                    'typical_semester': 'sophomore_spring',
                    'offered_semesters': ['fall', 'spring'],
                    'difficulty': 4.3,
                    'workload_hours': 15,
                    'required': True,
                    'course_type': 'foundation'
                },
                'CS 38100': {
                    'title': 'Introduction to Algorithms',
                    'credits': 3,
                    'description': 'Design and analysis of algorithms, complexity theory, and algorithmic problem solving.',
                    'prerequisites': ['CS 25100'],
                    'corequisites': [],
                    'typical_semester': 'junior_fall',
                    'offered_semesters': ['fall', 'spring'],
                    'difficulty': 4.5,
                    'workload_hours': 16,
                    'required': True,
                    'course_type': 'core',
                    'mandatory_timing': 'Fall junior year'
                }
            },
            
            'math_requirements': {
                'MA 16100': {
                    'title': 'Calculus I',
                    'credits': 5,
                    'description': 'Limits, derivatives, and applications of derivatives.',
                    'prerequisites': [],
                    'corequisites': [],
                    'typical_semester': 'freshman_fall',
                    'offered_semesters': ['fall', 'spring', 'summer'],
                    'difficulty': 3.0,
                    'required': True,
                    'course_type': 'math'
                },
                'MA 16200': {
                    'title': 'Calculus II',
                    'credits': 5,
                    'description': 'Integration techniques, infinite series, and applications.',
                    'prerequisites': ['MA 16100'],
                    'corequisites': [],
                    'typical_semester': 'freshman_spring',
                    'offered_semesters': ['fall', 'spring', 'summer'],
                    'difficulty': 3.2,
                    'required': True,
                    'course_type': 'math'
                },
                'MA 26100': {
                    'title': 'Multivariate Calculus',
                    'credits': 4,
                    'description': 'Partial derivatives, multiple integrals, and vector calculus.',
                    'prerequisites': ['MA 16200'],
                    'corequisites': [],
                    'typical_semester': 'sophomore_fall',
                    'offered_semesters': ['fall', 'spring'],
                    'difficulty': 3.4,
                    'required': True,
                    'course_type': 'math'
                },
                'MA 26500': {
                    'title': 'Linear Algebra',
                    'credits': 3,
                    'description': 'Vector spaces, matrices, eigenvalues, and linear transformations.',
                    'prerequisites': ['MA 16200'],
                    'corequisites': ['MA 26100'],
                    'typical_semester': 'sophomore_spring',
                    'offered_semesters': ['fall', 'spring'],
                    'difficulty': 3.6,
                    'required': True,
                    'course_type': 'math'
                },
                'STAT 35000': {
                    'title': 'Elementary Statistics',
                    'credits': 3,
                    'description': 'Basic statistical concepts, probability distributions, and hypothesis testing.',
                    'prerequisites': ['MA 16200'],
                    'corequisites': [],
                    'typical_semester': 'junior_fall',
                    'offered_semesters': ['fall', 'spring', 'summer'],
                    'difficulty': 2.8,
                    'required': True,
                    'course_type': 'math'
                }
            },
            
            'track_courses': {
                'machine_intelligence': {
                    'track_name': 'Machine Intelligence',
                    'track_code': 'MI',
                    'total_courses': 6,
                    'required_courses': 4,
                    'elective_courses': 2,
                    'courses': {
                        'CS 37300': {
                            'title': 'Data Mining and Machine Learning',
                            'credits': 3,
                            'description': 'Machine learning algorithms, data preprocessing, and model evaluation.',
                            'prerequisites': ['CS 25100', 'STAT 35000'],
                            'typical_semester': 'junior_fall',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.2,
                            'workload_hours': 14,
                            'required_for_track': True,
                            'course_type': 'track_required'
                        },
                        'CS 47100': {
                            'title': 'Introduction to Artificial Intelligence',
                            'credits': 3,
                            'description': 'Search algorithms, knowledge representation, and AI problem-solving.',
                            'prerequisites': ['CS 25100'],
                            'typical_semester': 'junior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.0,
                            'workload_hours': 13,
                            'required_for_track': False,
                            'course_type': 'track_choice',
                            'choice_group': 'ai_foundation'
                        },
                        'CS 47300': {
                            'title': 'Web Information Search and Management',
                            'credits': 3,
                            'description': 'Information retrieval, web search engines, and text processing.',
                            'prerequisites': ['CS 25100'],
                            'typical_semester': 'junior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 3.8,
                            'workload_hours': 12,
                            'required_for_track': False,
                            'course_type': 'track_choice',
                            'choice_group': 'ai_foundation'
                        },
                        'STAT 41600': {
                            'title': 'Probability',
                            'credits': 3,
                            'description': 'Mathematical probability theory and applications.',
                            'prerequisites': ['MA 26100'],
                            'typical_semester': 'junior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.1,
                            'workload_hours': 12,
                            'required_for_track': False,
                            'course_type': 'track_choice',
                            'choice_group': 'statistics'
                        },
                        'MA 41600': {
                            'title': 'Probability',
                            'credits': 3,
                            'description': 'Mathematical probability from mathematics department.',
                            'prerequisites': ['MA 26100'],
                            'typical_semester': 'junior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.2,
                            'workload_hours': 12,
                            'required_for_track': False,
                            'course_type': 'track_choice',
                            'choice_group': 'statistics'
                        },
                        'STAT 51200': {
                            'title': 'Applied Regression Analysis',
                            'credits': 3,
                            'description': 'Statistical modeling and regression analysis.',
                            'prerequisites': ['STAT 35000'],
                            'typical_semester': 'junior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 3.9,
                            'workload_hours': 11,
                            'required_for_track': False,
                            'course_type': 'track_choice',
                            'choice_group': 'statistics'
                        },
                        'CS 57700': {
                            'title': 'Natural Language Processing',
                            'credits': 3,
                            'description': 'Text processing, language understanding, and NLP applications.',
                            'prerequisites': ['CS 37300'],
                            'typical_semester': 'senior_fall',
                            'offered_semesters': ['fall'],
                            'difficulty': 4.4,
                            'workload_hours': 15,
                            'required_for_track': False,
                            'course_type': 'track_elective'
                        },
                        'CS 57800': {
                            'title': 'Statistical Machine Learning',
                            'credits': 3,
                            'description': 'Advanced machine learning theory and applications.',
                            'prerequisites': ['CS 37300'],
                            'typical_semester': 'senior_spring',
                            'offered_semesters': ['spring'],
                            'difficulty': 4.6,
                            'workload_hours': 16,
                            'required_for_track': False,
                            'course_type': 'track_elective'
                        },
                        'CS 43900': {
                            'title': 'Introduction to Data Visualization',
                            'credits': 3,
                            'description': 'Data visualization techniques and interactive graphics.',
                            'prerequisites': ['CS 25100'],
                            'typical_semester': 'senior_fall',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 3.7,
                            'workload_hours': 12,
                            'required_for_track': False,
                            'course_type': 'track_elective',
                            'conflicts': ['CS 44000', 'CS 47500']
                        },
                        'CS 44000': {
                            'title': 'Large-Scale Data Analytics',
                            'credits': 3,
                            'description': 'Big data processing and distributed analytics.',
                            'prerequisites': ['CS 25100'],
                            'typical_semester': 'senior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.3,
                            'workload_hours': 14,
                            'required_for_track': False,
                            'course_type': 'track_elective',
                            'conflicts': ['CS 43900', 'CS 47500']
                        }
                    }
                },
                
                'software_engineering': {
                    'track_name': 'Software Engineering',
                    'track_code': 'SE',
                    'total_courses': 6,
                    'required_courses': 5,
                    'elective_courses': 1,
                    'courses': {
                        'CS 30700': {
                            'title': 'Software Engineering I',
                            'credits': 3,
                            'description': 'Software development lifecycle, design patterns, and team programming.',
                            'prerequisites': ['CS 25200'],
                            'typical_semester': 'junior_fall',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 3.9,
                            'workload_hours': 13,
                            'required_for_track': True,
                            'course_type': 'track_required'
                        },
                        'CS 40800': {
                            'title': 'Software Testing',
                            'credits': 3,
                            'description': 'Testing methodologies, quality assurance, and verification.',
                            'prerequisites': ['CS 30700'],
                            'typical_semester': 'junior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 3.8,
                            'workload_hours': 12,
                            'required_for_track': True,
                            'course_type': 'track_required'
                        },
                        'CS 40700': {
                            'title': 'Software Engineering Senior Project',
                            'credits': 3,
                            'description': 'Capstone software development project.',
                            'prerequisites': ['CS 30700'],
                            'typical_semester': 'senior_fall',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.0,
                            'workload_hours': 15,
                            'required_for_track': True,
                            'course_type': 'track_required'
                        },
                        'CS 35200': {
                            'title': 'Compilers: Principles and Practice',
                            'credits': 3,
                            'description': 'Compiler design, parsing, and code generation.',
                            'prerequisites': ['CS 25200'],
                            'typical_semester': 'junior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.4,
                            'workload_hours': 15,
                            'required_for_track': False,
                            'course_type': 'track_choice',
                            'choice_group': 'systems'
                        },
                        'CS 35400': {
                            'title': 'Operating Systems',
                            'credits': 3,
                            'description': 'Operating system concepts, processes, and memory management.',
                            'prerequisites': ['CS 25200'],
                            'typical_semester': 'junior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.5,
                            'workload_hours': 16,
                            'required_for_track': False,
                            'course_type': 'track_choice',
                            'choice_group': 'systems'
                        },
                        'CS 42200': {
                            'title': 'Computer Networks',
                            'credits': 3,
                            'description': 'Network protocols, distributed systems, and network programming.',
                            'prerequisites': ['CS 25200'],
                            'typical_semester': 'senior_fall',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.2,
                            'workload_hours': 14,
                            'required_for_track': False,
                            'course_type': 'track_elective'
                        },
                        'CS 42600': {
                            'title': 'Computer Security',
                            'credits': 3,
                            'description': 'Security principles, cryptography, and system security.',
                            'prerequisites': ['CS 25200'],
                            'typical_semester': 'senior_spring',
                            'offered_semesters': ['fall', 'spring'],
                            'difficulty': 4.1,
                            'workload_hours': 13,
                            'required_for_track': False,
                            'course_type': 'track_elective'
                        }
                    }
                }
            },
            
            'professors': {
                'prof_johnson': {
                    'name': 'Dr. Sarah Johnson',
                    'email': 'sjohnson@cs.purdue.edu',
                    'office': 'LWSN 1142',
                    'office_hours': 'MWF 2-3 PM',
                    'courses_taught': ['CS 18000', 'CS 24000'],
                    'research_areas': ['Software Engineering', 'Programming Languages'],
                    'rating': 4.3,
                    'difficulty': 3.2
                },
                'prof_smith': {
                    'name': 'Dr. Michael Smith',
                    'email': 'msmith@cs.purdue.edu',
                    'office': 'LWSN 2150',
                    'office_hours': 'TTh 1-2:30 PM',
                    'courses_taught': ['CS 25100', 'CS 38100'],
                    'research_areas': ['Algorithms', 'Data Structures'],
                    'rating': 4.5,
                    'difficulty': 3.8
                },
                'prof_davis': {
                    'name': 'Dr. Emily Davis',
                    'email': 'edavis@cs.purdue.edu',
                    'office': 'LWSN 3165',
                    'office_hours': 'MW 3-4 PM',
                    'courses_taught': ['CS 37300', 'CS 57700'],
                    'research_areas': ['Machine Learning', 'Natural Language Processing'],
                    'rating': 4.6,
                    'difficulty': 4.1
                }
            },
            
            'academic_policies': {
                'prerequisite_policy': {
                    'title': 'Course Prerequisites',
                    'description': 'Students must complete all prerequisite courses with a grade of C or better.',
                    'exceptions': 'Instructor permission required for prerequisite waivers.',
                    'enforcement': 'Automatic enrollment blocks for unmet prerequisites.'
                },
                'retake_policy': {
                    'title': 'Course Retake Policy',
                    'description': 'Students may retake a course to improve their grade.',
                    'grade_replacement': 'Most recent grade replaces previous grade in GPA calculation.',
                    'attempt_limit': 'Maximum 3 attempts per course without special approval.'
                },
                'graduation_requirements': {
                    'title': 'Graduation Requirements',
                    'total_credits': 120,
                    'cs_credits': 36,
                    'math_credits': 20,
                    'gpa_requirement': 2.0,
                    'major_gpa_requirement': 2.0,
                    'residency_requirement': 32
                }
            }
        }
    
    def build_complete_graph(self) -> nx.DiGraph:
        """Build complete knowledge graph with all CS program data"""
        self.logger.info("🔧 BUILDING: Complete Purdue CS knowledge graph")
        
        # Add all course nodes
        self.add_course_nodes()
        
        # Add prerequisite edges
        self.add_prerequisite_edges()
        
        # Add track nodes and relationships
        self.add_track_nodes()
        
        # Add professor nodes and relationships
        self.add_professor_nodes()
        
        # Add policy nodes
        self.add_policy_nodes()
        
        # Add semester sequence information
        self.add_semester_sequence()
        
        # Validate graph structure
        self.validate_graph()
        
        self.logger.info(f"✅ COMPLETED: Graph with {len(self.graph.nodes())} nodes and {len(self.graph.edges())} edges")
        
        return self.graph
    
    def add_course_nodes(self):
        """Add all course nodes to the graph"""
        self.logger.info("🔧 ADDING: Course nodes")
        
        # Add foundation courses
        for course_code, course_data in self.cs_program_data['foundation_courses'].items():
            self.graph.add_node(course_code, 
                              type='course',
                              **course_data)
        
        # Add math courses
        for course_code, course_data in self.cs_program_data['math_requirements'].items():
            self.graph.add_node(course_code,
                              type='course',
                              **course_data)
        
        # Add track courses
        for track_name, track_data in self.cs_program_data['track_courses'].items():
            for course_code, course_data in track_data['courses'].items():
                self.graph.add_node(course_code,
                                  type='course',
                                  track=track_name,
                                  **course_data)
        
        course_count = len([n for n in self.graph.nodes() if self.graph.nodes[n].get('type') == 'course'])
        self.logger.info(f"✅ ADDED: {course_count} course nodes")
    
    def add_prerequisite_edges(self):
        """Add prerequisite relationships as edges"""
        self.logger.info("🔧 ADDING: Prerequisite edges")
        
        edge_count = 0
        
        # Process all courses for prerequisites
        for node in self.graph.nodes():
            if self.graph.nodes[node].get('type') == 'course':
                course_data = self.graph.nodes[node]
                prerequisites = course_data.get('prerequisites', [])
                
                for prereq in prerequisites:
                    if prereq in self.graph.nodes():
                        self.graph.add_edge(prereq, node, 
                                          relationship='prerequisite',
                                          type='required')
                        edge_count += 1
                
                # Add corequisite relationships
                corequisites = course_data.get('corequisites', [])
                for coreq in corequisites:
                    if coreq in self.graph.nodes():
                        self.graph.add_edge(coreq, node,
                                          relationship='corequisite',
                                          type='concurrent')
                        edge_count += 1
        
        self.logger.info(f"✅ ADDED: {edge_count} prerequisite/corequisite edges")
    
    def add_track_nodes(self):
        """Add track nodes and relationships"""
        self.logger.info("🔧 ADDING: Track nodes and relationships")
        
        for track_name, track_data in self.cs_program_data['track_courses'].items():
            # Add track node
            track_node = f"{track_name}_track"
            self.graph.add_node(track_node,
                              type='track',
                              track_name=track_data['track_name'],
                              track_code=track_data['track_code'],
                              total_courses=track_data['total_courses'],
                              required_courses=track_data['required_courses'],
                              elective_courses=track_data['elective_courses'])
            
            # Add edges from courses to track
            for course_code, course_data in track_data['courses'].items():
                if course_code in self.graph.nodes():
                    self.graph.add_edge(course_code, track_node,
                                      relationship='belongs_to_track',
                                      course_type=course_data.get('course_type', 'unknown'))
        
        track_count = len([n for n in self.graph.nodes() if self.graph.nodes[n].get('type') == 'track'])
        self.logger.info(f"✅ ADDED: {track_count} track nodes")
    
    def add_professor_nodes(self):
        """Add professor nodes and relationships"""
        self.logger.info("🔧 ADDING: Professor nodes and relationships")
        
        for prof_id, prof_data in self.cs_program_data['professors'].items():
            # Add professor node
            self.graph.add_node(prof_id,
                              type='professor',
                              **prof_data)
            
            # Add edges from professor to courses they teach
            for course in prof_data.get('courses_taught', []):
                if course in self.graph.nodes():
                    self.graph.add_edge(prof_id, course,
                                      relationship='teaches')
        
        prof_count = len([n for n in self.graph.nodes() if self.graph.nodes[n].get('type') == 'professor'])
        self.logger.info(f"✅ ADDED: {prof_count} professor nodes")
    
    def add_policy_nodes(self):
        """Add academic policy nodes"""
        self.logger.info("🔧 ADDING: Policy nodes")
        
        for policy_id, policy_data in self.cs_program_data['academic_policies'].items():
            self.graph.add_node(policy_id,
                              type='policy',
                              **policy_data)
        
        policy_count = len([n for n in self.graph.nodes() if self.graph.nodes[n].get('type') == 'policy'])
        self.logger.info(f"✅ ADDED: {policy_count} policy nodes")
    
    def add_semester_sequence(self):
        """Add semester sequence information"""
        self.logger.info("🔧 ADDING: Semester sequence information")
        
        # Add semester nodes
        semesters = [
            'freshman_fall', 'freshman_spring',
            'sophomore_fall', 'sophomore_spring', 
            'junior_fall', 'junior_spring',
            'senior_fall', 'senior_spring'
        ]
        
        for semester in semesters:
            self.graph.add_node(semester,
                              type='semester',
                              year=semester.split('_')[0],
                              term=semester.split('_')[1])
        
        # Add edges from semesters to typical courses
        for node in self.graph.nodes():
            if self.graph.nodes[node].get('type') == 'course':
                typical_sem = self.graph.nodes[node].get('typical_semester')
                if typical_sem and typical_sem in self.graph.nodes():
                    self.graph.add_edge(typical_sem, node,
                                      relationship='typical_course')
        
        self.logger.info(f"✅ ADDED: {len(semesters)} semester nodes")
    
    def validate_graph(self):
        """Validate graph structure and relationships"""
        self.logger.info("🔧 VALIDATING: Graph structure")
        
        # Check for isolated nodes
        isolated = list(nx.isolates(self.graph))
        if isolated:
            self.logger.warning(f"⚠️  Found {len(isolated)} isolated nodes: {isolated}")
        
        # Check prerequisite chains
        foundation_courses = ['CS 18000', 'CS 18200', 'CS 24000', 'CS 25000', 'CS 25100', 'CS 25200']
        for course in foundation_courses:
            if course in self.graph.nodes():
                prereqs = list(self.graph.predecessors(course))
                successors = list(self.graph.successors(course))
                self.logger.debug(f"📋 {course}: {len(prereqs)} prerequisites, {len(successors)} successors")
        
        # Validate track relationships
        track_nodes = [n for n in self.graph.nodes() if self.graph.nodes[n].get('type') == 'track']
        for track in track_nodes:
            track_courses = list(self.graph.predecessors(track))
            self.logger.debug(f"📋 {track}: {len(track_courses)} courses")
        
        self.logger.info("✅ VALIDATED: Graph structure is valid")
    
    def save_graph(self, filename: str = 'purdue_cs_knowledge_graph.pkl'):
        """Save the graph to a pickle file"""
        import pickle
        
        with open(filename, 'wb') as f:
            pickle.dump(self.graph, f)
        
        self.logger.info(f"💾 SAVED: Graph saved to {filename}")
    
    def export_graph_summary(self) -> dict:
        """Export graph summary for analysis"""
        summary = {
            'total_nodes': len(self.graph.nodes()),
            'total_edges': len(self.graph.edges()),
            'node_types': {},
            'course_count': 0