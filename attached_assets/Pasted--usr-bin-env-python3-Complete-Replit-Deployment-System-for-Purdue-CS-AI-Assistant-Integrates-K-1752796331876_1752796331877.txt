#!/usr/bin/env python3
"""
Complete Replit Deployment System for Purdue CS AI Assistant
Integrates Knowledge Graph, n8n Pipeline, and AI Training
"""

import os
import sys
import json
import sqlite3
import asyncio
import threading
from datetime import datetime
from flask import Flask, request, jsonify, render_template_string
import requests
import subprocess

# Import our custom modules
try:
    from knowledge_graph_system import (
        KnowledgeGraph, 
        PurdueDataLoader, 
        DynamicResponseGenerator, 
        N8NIntegration,
        initialize_system
    )
except ImportError as e:
    print(f"‚ùå Error importing modules: {e}")
    print("Please ensure all required files are in your Replit project")
    sys.exit(1)

class ReplitDeploymentManager:
    def __init__(self):
        self.config = self.load_config()
        self.kg = None
        self.rg = None
        self.n8n = None
        self.app = Flask(__name__)
        self.setup_routes()
        
    def load_config(self):
        """Load configuration from environment variables and defaults"""
        config = {
            "anthropic_api_key": os.environ.get('ANTHROPIC_API_KEY', ''),
            "n8n_webhook_url": os.environ.get('N8N_WEBHOOK_URL', ''),
            "knowledge_graph_url": os.environ.get('KNOWLEDGE_GRAPH_URL', 'http://localhost:5000'),
            "database_path": os.environ.get('DATABASE_PATH', 'purdue_cs_knowledge.db'),
            "debug_mode": os.environ.get('DEBUG_MODE', 'true').lower() == 'true',
            "confidence_threshold": float(os.environ.get('CONFIDENCE_THRESHOLD', '0.8')),
            "auto_refresh_hours": int(os.environ.get('AUTO_REFRESH_HOURS', '6')),
            "slack_webhook": os.environ.get('SLACK_WEBHOOK_URL', ''),
            "port": int(os.environ.get('PORT', '5000')),
            "host": os.environ.get('HOST', '0.0.0.0')
        }
        
        # Validate required config
        if not config['anthropic_api_key']:
            print("‚ö†Ô∏è Warning: ANTHROPIC_API_KEY not set. AI enhancement will be disabled.")
        
        return config
    
    def initialize_system(self):
        """Initialize the complete system"""
        print("üöÄ Initializing Purdue CS AI Assistant System...")
        print("=" * 60)
        
        try:
            # Initialize knowledge graph and components
            self.kg, self.rg, self.n8n = initialize_system()
            print("‚úÖ Knowledge graph system initialized")
            
            # Load initial data
            self.load_initial_data()
            print("‚úÖ Initial data loaded")
            
            # Setup n8n integration if webhook URL provided
            if self.config['n8n_webhook_url']:
                self.setup_n8n_integration()
                print("‚úÖ n8n integration configured")
            
            return True
            
        except Exception as e:
            print(f"‚ùå System initialization failed: {e}")
            return False
    
    def load_initial_data(self):
        """Load initial track data into knowledge graph"""
        try:
            loader = PurdueDataLoader(self.kg)
            
            print("üìö Loading Machine Intelligence track...")
            mi_loaded = loader.load_machine_intelligence_track()
            
            print("üìö Loading Software Engineering track...")
            se_loaded = loader.load_software_engineering_track()
            
            if mi_loaded and se_loaded:
                print("‚úÖ All track data loaded successfully")
                return True
            else:
                print(f"‚ö†Ô∏è Data loading issues: MI={mi_loaded}, SE={se_loaded}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error loading initial data: {e}")
            return False
    
    def setup_n8n_integration(self):
        """Setup n8n webhook integration"""
        try:
            # Register webhook with n8n
            webhook_data = {
                "name": "purdue_cs_ai_assistant",
                "url": f"{self.config['knowledge_graph_url']}/api/query",
                "method": "POST",
                "headers": {
                    "Content-Type": "application/json"
                }
            }
            
            # This would register with your n8n instance
            print(f"üîó n8n webhook configured: {self.config['n8n_webhook_url']}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è n8n integration setup failed: {e}")
    
    def setup_routes(self):
        """Setup Flask routes for the deployment system"""
        
        @self.app.route('/')
        def dashboard():
            """Main dashboard"""
            return render_template_string(DASHBOARD_HTML, config=self.config)
        
        @self.app.route('/api/status')
        def system_status():
            """Get system status"""
            try:
                stats = self.get_system_stats()
                return jsonify({
                    "status": "healthy",
                    "timestamp": datetime.now().isoformat(),
                    "config": {k: v for k, v in self.config.items() if 'key' not in k.lower()},
                    "stats": stats
                })
            except Exception as e:
                return jsonify({
                    "status": "error",
                    "error": str(e),
                    "timestamp": datetime.now().isoformat()
                }), 500
        
        @self.app.route('/api/chat', methods=['POST'])
        def chat_endpoint():
            """Main chat endpoint for AI queries"""
            try:
                data = request.get_json()
                if not data or 'query' not in data:
                    return jsonify({"error": "Missing query parameter"}), 400
                
                query = data['query']
                track_context = data.get('track_context')
                
                # Process query through knowledge graph
                response = self.rg.generate_response(query, track_context)
                
                # Enhance with Claude AI if configured and confidence is low
                if (self.config['anthropic_api_key'] and 
                    response['confidence'] < self.config['confidence_threshold']):
                    enhanced_response = self.enhance_with_claude(query, response)
                    if enhanced_response:
                        response = enhanced_response
                
                # Log interaction for training
                self.log_interaction(query, response)
                
                return jsonify(response)
                
            except Exception as e:
                return jsonify({
                    "error": str(e),
                    "timestamp": datetime.now().isoformat()
                }), 500
        
        @self.app.route('/api/train', methods=['POST'])
        def trigger_training():
            """Trigger AI training with current data"""
            try:
                training_result = self.train_ai_system()
                return jsonify(training_result)
            except Exception as e:
                return jsonify({"error": str(e)}), 500
        
        @self.app.route('/api/reload-data', methods=['POST'])
        def reload_data():
            """Reload track data from sources"""
            try:
                result = self.load_initial_data()
                return jsonify({
                    "success": result,
                    "timestamp": datetime.now().isoformat(),
                    "message": "Data reloaded successfully" if result else "Data reload failed"
                })
            except Exception as e:
                return jsonify({"error": str(e)}), 500
        
        @self.app.route('/api/export-training-data')
        def export_training_data():
            """Export training data for external use"""
            try:
                training_data = self.get_training_data()
                return jsonify({
                    "training_data": training_data,
                    "export_timestamp": datetime.now().isoformat(),
                    "count": len(training_data)
                })
            except Exception as e:
                return jsonify({"error": str(e)}), 500
    
    def enhance_with_claude(self, query: str, kg_response: dict) -> dict:
        """Enhance response using Claude AI"""
        try:
            # Prepare Claude API request
            claude_prompt = f"""You are an AI assistant for Purdue CS track information. Use ONLY the provided knowledge graph data to answer questions. Do not use any external knowledge.

Knowledge Graph Data:
{json.dumps(kg_response['source_data'], indent=2)}

User Query: {query}

Based ONLY on the knowledge graph data above, provide a helpful and accurate response. If the data doesn't contain enough information to answer the query, say so clearly."""

            response = requests.post(
                "https://api.anthropic.com/v1/messages",
                headers={
                    "Content-Type": "application/json",
                    "x-api-key": self.config['anthropic_api_key'],
                    "anthropic-version": "2023-06-01"
                },
                json={
                    "model": "claude-sonnet-4-20250514",
                    "max_tokens": 1000,
                    "messages": [{"role": "user", "content": claude_prompt}]
                },
                timeout=30
            )
            
            if response.status_code == 200:
                claude_data = response.json()
                enhanced_response = kg_response.copy()
                enhanced_response['response'] = claude_data['content'][0]['text']
                enhanced_response['confidence'] = 0.95
                enhanced_response['source'] = 'claude_enhanced'
                return enhanced_response
            else:
                print(f"Claude API error: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"Error enhancing with Claude: {e}")
            return None
    
    def train_ai_system(self) -> dict:
        """Train AI system with current knowledge graph data"""
        try:
            training_data = self.get_training_data()
            
            if not self.config['anthropic_api_key']:
                return {
                    "status": "skipped",
                    "message": "No Anthropic API key configured",
                    "training_examples": len(training_data)
                }
            
            # Prepare training prompt
            training_prompt = f"""You are being trained as a Purdue CS track advisor. Use ONLY the following data to answer questions about Purdue CS tracks.

Training Data:
{json.dumps(training_data[:50], indent=2)}

Rules:
1. Use ONLY the information provided in the training data
2. Do not make up or hallucinate course information
3. If you don't have enough data to answer, say so
4. Always cite the source data when providing responses
5. Be accurate about course codes, titles, and requirements

Respond with 'Training acknowledged' if you understand these rules and the data."""

            response = requests.post(
                "https://api.anthropic.com/v1/messages",
                headers={
                    "Content-Type": "application/json",
                    "x-api-key": self.config['anthropic_api_key'],
                    "anthropic-version": "2023-06-01"
                },
                json={
                    "model": "claude-sonnet-4-20250514",
                    "max_tokens": 100,
                    "messages": [{"role": "user", "content": training_prompt}]
                },
                timeout=30
            )
            
            if response.status_code == 200:
                return {
                    "status": "success",
                    "message": "AI training completed",
                    "training_examples": len(training_data),
                    "timestamp": datetime.now().isoformat()
                }
            else:
                return {
                    "status": "error",
                    "message": f"Training API error: {response.status_code}",
                    "training_examples": len(training_data)
                }
                
        except Exception as e:
            return {
                "status": "error",
                "message": str(e),
                "training_examples": 0
            }
    
    def get_system_stats(self) -> dict:
        """Get comprehensive system statistics"""
        try:
            conn = sqlite3.connect(self.kg.db_path)
            cursor = conn.cursor()
            
            # Count courses by track
            cursor.execute('SELECT track, COUNT(*) FROM courses GROUP BY track')
            course_counts = dict(cursor.fetchall())
            
            # Count training data
            cursor.execute('SELECT COUNT(*) FROM training_data')
            training_count = cursor.fetchone()[0]
            
            # Get recent queries
            cursor.execute('''
                SELECT query, track, confidence, created_at 
                FROM training_data 
                ORDER BY created_at DESC 
                LIMIT 10
            ''')
            recent_queries = [
                {"query": row[0], "track": row[1], "confidence": row[2], "timestamp": row[3]}
                for row in cursor.fetchall()
            ]
            
            conn.close()
            
            return {
                "courses_by_track": course_counts,
                "training_data_count": training_count,
                "knowledge_graph_nodes": self.kg.graph.number_of_nodes(),
                "knowledge_graph_edges": self.kg.graph.number_of_edges(),
                "recent_queries": recent_queries,
                "database_size": os.path.getsize(self.kg.db_path) if os.path.exists(self.kg.db_path) else 0
            }
            
        except Exception as e:
            print(f"Error getting system stats: {e}")
            return {}
    
    def get_training_data(self) -> list:
        """Get all training data for export"""
        try:
            conn = sqlite3.connect(self.kg.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT id, query, response, track, confidence, source_data, created_at
                FROM training_data
                ORDER BY created_at DESC
            ''')
            
            rows = cursor.fetchall()
            conn.close()
            
            training_data = []
            for row in rows:
                training_data.append({
                    "id": row[0],
                    "query": row[1],
                    "response": row[2],
                    "track": row[3],
                    "confidence": row[4],
                    "source_data": json.loads(row[5]) if row[5] else {},
                    "created_at": row[6]
                })
            
            return training_data
            
        except Exception as e:
            print(f"Error getting training data: {e}")
            return []
    
    def log_interaction(self, query: str, response: dict):
        """Log user interaction for training purposes"""
        try:
            conn = sqlite3.connect(self.kg.db_path)
            cursor = conn.cursor()
            
            interaction_id = f"interaction_{datetime.now().timestamp()}"
            cursor.execute('''
                INSERT INTO training_data (id, query, response, track, confidence, source_data, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                interaction_id,
                query,
                response.get('response', ''),
                response.get('track', ''),
                response.get('confidence', 0.0),
                json.dumps(response.get('source_data', {})),
                datetime.now().isoformat()
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"Error logging interaction: {e}")
    
    def run(self):
        """Run the complete deployment system"""
        print("üåê Starting Purdue CS AI Assistant Deployment System...")
        print(f"üîó Server will be available at: http://{self.config['host']}:{self.config['port']}")
        print("üìä Dashboard: /")
        print("üí¨ Chat API: POST /api/chat")
        print("üìà Status: GET /api/status")
        print("üîÑ Train: POST /api/train")
        print("=" * 60)
        
        # Start the Flask app
        self.app.run(
            host=self.config['host'],
            port=self.config['port'],
            debug=self.config['debug_mode']
        )

# Dashboard HTML template
DASHBOARD_HTML = """
<!DOCTYPE html>
<html>
<head>
    <title>Purdue CS AI Assistant Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; }
        .card { background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .header { text-align: center; color: #333; }
        .status { display: inline-block; padding: 5px 10px; border-radius: 15px; color: white; }
        .status.healthy { background: #28a745; }
        .status.error { background: #dc3545; }
        .chat-container { display: flex; gap: 20px; }
        .chat-input { flex: 1; }
        .chat-output { flex: 1; background: #f8f9fa; padding: 15px; border-radius: 4px; }
        button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
        button:hover { background: #0056b3; }
        input, select, textarea { width: 100%; padding: 8px; margin: 5px 0; border: 1px solid #ddd; border-radius: 4px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
        .stat-box { text-align: center; padding: 15px; background: #e9ecef; border-radius: 4px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h1 class="header">üéì Purdue CS AI Assistant Dashboard</h1>
            <div style="text-align: center;">
                <span class="status healthy" id="systemStatus">System Healthy</span>
                <p>Real-time AI assistant for Purdue CS track information</p>
            </div>
        </div>

        <div class="card">
            <h3>üí¨ Test Chat Interface</h3>
            <div class="chat-container">
                <div class="chat-input">
                    <label>Query:</label>
                    <textarea id="queryInput" placeholder="Ask about Purdue CS tracks..." rows="3"></textarea>
                    <label>Track Context (optional):</label>
                    <select id="trackSelect">
                        <option value="">Auto-detect</option>
                        <option value="MI">Machine Intelligence</option>
                        <option value="SE">Software Engineering</option>
                    </select>
                    <button onclick="sendQuery()">Send Query</button>
                    <button onclick="trainAI()">Train AI</button>
                    <button onclick="reloadData()">Reload Data</button>
                </div>
                <div class="chat-output">
                    <h4>Response:</h4>
                    <div id="responseOutput">Ask a question to get started...</div>
                </div>
            </div>
        </div>

        <div class="card">
            <h3>üìä System Statistics</h3>
            <div class="stats-grid" id="statsGrid">
                <div class="stat-box">
                    <h4>Loading...</h4>
                    <p>Statistics</p>
                </div>
            </div>
        </div>

        <div class="card">
            <h3>üîß System Configuration</h3>
            <div style="background: #f8f9fa; padding: 15px; border-radius: 4px; font-family: monospace; font-size: 12px;">
                <strong>Config:</strong><br>
                Knowledge Graph URL: {{ config.knowledge_graph_url }}<br>
                Debug Mode: {{ config.debug_mode }}<br>
                Confidence Threshold: {{ config.confidence_threshold }}<br>
                Auto Refresh: {{ config.auto_refresh_hours }} hours<br>
                Database: {{ config.database_path }}
            </div>
        </div>
    </div>

    <script>
        async function sendQuery() {
            const query = document.getElementById('queryInput').value;
            const track = document.getElementById('trackSelect').value;
            
            if (!query.trim()) {
                alert('Please enter a query');
                return;
            }
            
            document.getElementById('responseOutput').innerHTML = 'Processing...';
            
            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        query: query, 
                        track_context: track || null 
                    })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    document.getElementById('responseOutput').innerHTML = `
                        <strong>Response:</strong><br>
                        ${data.response.replace(/\\n/g, '<br>')}<br><br>
                        <small>
                            <strong>Confidence:</strong> ${(data.confidence * 100).toFixed(1)}%<br>
                            <strong>Track:</strong> ${data.track || 'General'}<br>
                            <strong>Source:</strong> ${data.source || 'Knowledge Graph'}
                        </small>
                    `;
                } else {
                    document.getElementById('responseOutput').innerHTML = `
                        <div style="color: red;">
                            <strong>Error:</strong> ${data.error}
                        </div>
                    `;
                }
            } catch (error) {
                document.getElementById('responseOutput').innerHTML = `
                    <div style="color: red;">
                        <strong>Error:</strong> ${error.message}
                    </div>
                `;
            }
        }
        
        async function trainAI() {
            try {
                const response = await fetch('/api/train', { method: 'POST' });
                const data = await response.json();
                alert(`Training ${data.status}: ${data.message}`);
                loadStats();
            } catch (error) {
                alert(`Training error: ${error.message}`);
            }
        }
        
        async function reloadData() {
            try {
                const response = await fetch('/api/reload-data', { method: 'POST' });
                const data = await response.json();
                alert(data.message);
                loadStats();
            } catch (error) {
                alert(`Reload error: ${error.message}`);
            }
        }
        
        async function loadStats() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                
                if (data.status === 'healthy') {
                    document.getElementById('systemStatus').textContent = 'System Healthy';
                    document.getElementById('systemStatus').className = 'status healthy';
                } else {
                    document.getElementById('systemStatus').textContent = 'System Error';
                    document.getElementById('systemStatus').className = 'status error';
                }
                
                const stats = data.stats || {};
                const statsHtml = `
                    <div class="stat-box">
                        <h4>${stats.courses_by_track?.MI || 0}</h4>
                        <p>MI Track Courses</p>
                    </div>
                    <div class="stat-box">
                        <h4>${stats.courses_by_track?.SE || 0}</h4>
                        <p>SE Track Courses</p>
                    </div>
                    <div class="stat-box">
                        <h4>${stats.training_data_count || 0}</h4>
                        <p>Training Examples</p>
                    </div>
                    <div class="stat-box">
                        <h4>${stats.knowledge_graph_nodes || 0}</h4>
                        <p>Knowledge Nodes</p>
                    </div>
                `;
                
                document.getElementById('statsGrid').innerHTML = statsHtml;
                
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }
        
        // Load stats on page load
        loadStats();
        
        // Auto-refresh stats every 30 seconds
        setInterval(loadStats, 30000);
        
        // Enter key support for query input
        document.getElementById('queryInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendQuery();
            }
        });
    </script>
</body>
</html>
"""

def main():
    """Main deployment function"""
    print("üéì Purdue CS AI Assistant - Complete Deployment")
    print("=" * 60)
    
    # Initialize deployment manager
    manager = ReplitDeploymentManager()
    
    # Initialize the system
    if not manager.initialize_system():
        print("‚ùå System initialization failed. Exiting.")
        sys.exit(1)
    
    print("‚úÖ System initialization complete!")
    print("\nüöÄ Starting web server...")
    
    # Run the system
    try:
        manager.run()
    except KeyboardInterrupt:
        print("\n\nüëã Shutting down gracefully...")
    except Exception as e:
        print(f"\n‚ùå Server error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()