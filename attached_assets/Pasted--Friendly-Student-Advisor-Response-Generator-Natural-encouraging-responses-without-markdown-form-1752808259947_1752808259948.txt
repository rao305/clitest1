"""
Friendly Student Advisor Response Generator
Natural, encouraging responses without markdown formatting
"""

import json
import sqlite3
import re
import random
from datetime import datetime

class FriendlyStudentAdvisor:
    def __init__(self, knowledge_graph):
        self.kg = knowledge_graph
        
        # Friendly greeting phrases
        self.greetings = [
            "Hey there!",
            "Great question!",
            "I'm happy to help with that!",
            "No worries, I've got you covered!",
            "Let me break that down for you!",
            "Absolutely, here's what you need to know:",
            "I'm glad you asked!",
            "Perfect timing for this question!"
        ]
        
        # Encouraging phrases
        self.encouragement = [
            "You're on the right track!",
            "Don't worry, lots of students ask about this.",
            "This is totally manageable once you know the plan.",
            "You've got this!",
            "It's easier than it might seem at first.",
            "I know it can feel overwhelming, but let's make it simple.",
            "Good news is there's a clear path forward.",
            "You're asking all the right questions!"
        ]
        
        # Transition phrases  
        self.transitions = [
            "Here's the deal:",
            "So here's how it works:",
            "Let me walk you through this:",
            "The way it breaks down is:",
            "Here's what I recommend:",
            "This is how you'll want to approach it:",
            "The timeline looks like this:",
            "Here's your game plan:"
        ]
        
    def generate_response(self, query: str, track_context: str = None) -> dict:
        """Generate friendly, encouraging response"""
        
        query_lower = query.lower()
        
        # Route to appropriate handler
        if any(word in query_lower for word in ["when", "timing", "sequence", "order"]):
            return self._handle_timing_question(query, track_context)
        elif "cs " in query_lower and any(word in query_lower for word in ["take", "when", "year"]):
            return self._handle_course_timing(query, track_context)
        elif any(word in query_lower for word in ["required", "requirements", "need"]):
            return self._handle_requirements_question(query, track_context)
        elif any(word in query_lower for word in ["plan", "schedule", "timeline"]):
            return self._handle_planning_question(query, track_context)
        elif any(word in query_lower for word in ["can i", "should i", "is it ok"]):
            return self._handle_advice_question(query, track_context)
        elif any(word in query_lower for word in ["difference", "compare", "vs", "versus"]):
            return self._handle_comparison_question(query, track_context)
        else:
            return self._handle_general_question(query, track_context)
    
    def _handle_timing_question(self, query: str, track_context: str) -> dict:
        """Handle questions about when to take courses"""
        
        greeting = random.choice(self.greetings)
        
        response = f"{greeting} The CS progression at Purdue is actually pretty straightforward once you see the big picture.\n\n"
        
        response += "Your first two years are all about building that solid foundation. You'll start with CS 18000 in your first fall semester - that's where you learn object-oriented programming. Don't worry if it feels challenging at first, everyone goes through that learning curve!\n\n"
        
        response += "Here's how the timing flows:\n\n"
        response += "First year: You'll tackle CS 18000 in fall, then CS 18200 and CS 24000 in spring. You'll also be working through your calculus sequence.\n\n"
        
        response += "Second year: This is where things get more interesting! Fall brings CS 25000 (computer architecture) and CS 25100 (data structures). Spring you'll do CS 25200 (systems programming).\n\n"
        
        response += "Third year: Here's where the fun really starts! Fall of third year is when you'll take CS 38100 (algorithms) - this is super important because it opens up all the advanced courses. You'll also start your track courses and take a statistics class.\n\n"
        
        response += "The key thing to remember is that track courses can't start until you've got that foundation under your belt. Think of those first two years as building your toolkit - you need those tools before you can start specializing!\n\n"
        
        encouragement = random.choice(self.encouragement)
        response += f"{encouragement} Just take it one semester at a time and you'll be amazed how much you learn along the way."
        
        return {
            "query": query,
            "response": response,
            "confidence": 0.95,
            "track": "progression",
            "source_data": {"type": "timing_overview"}
        }
    
    def _handle_course_timing(self, query: str, track_context: str) -> dict:
        """Handle specific course timing questions"""
        
        course_match = re.search(r'(CS|STAT|MA)\s*(\d+)', query.upper())
        
        if not course_match:
            greeting = random.choice(self.greetings)
            return {
                "query": query,
                "response": f"{greeting} I'd love to help, but I'm not sure which specific course you're asking about. Could you mention the course code like CS 25100 or STAT 35000?",
                "confidence": 0.3,
                "track": track_context
            }
        
        course_code = f"{course_match.group(1)} {course_match.group(2)}"
        
        # Get course info from database
        conn = sqlite3.connect(self.kg.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT code, title, group_id, prerequisites, description
            FROM courses WHERE code = ?
        ''', (course_code,))
        course_data = cursor.fetchone()
        conn.close()
        
        greeting = random.choice(self.greetings)
        
        if not course_data:
            return {
                "query": query,
                "response": f"{greeting} Hmm, I don't have info on {course_code} in my database right now. Double-check that course code or feel free to ask about any of the main CS courses!",
                "confidence": 0.1,
                "track": track_context
            }
        
        code, title, timing, prereqs_json, description = course_data
        prereqs = json.loads(prereqs_json) if prereqs_json else []
        
        response = f"{greeting} Let me tell you about {code} - {title}.\n\n"
        
        # Specific timing advice based on course
        if course_code == "CS 38100":
            response += "This is a really important one! You'll want to take CS 38100 in the fall of your third year. I know that might seem late, but there's a good reason for the timing.\n\n"
            response += "You need CS 25100 (Data Structures) first because algorithms builds directly on those concepts. Think of data structures as learning the building blocks, and algorithms as learning how to use them efficiently.\n\n"
            response += "Once you complete CS 38100, it opens up tons of advanced courses, so it's worth waiting and doing it right!"
            
        elif course_code == "CS 37300":
            response += "CS 37300 is one of the core courses for the Machine Intelligence track - super cool stuff!\n\n"
            response += "You'll need CS 25100 and a statistics course before you can jump into this. The earliest you could realistically take it is spring of third year, but fall of fourth year is totally fine too.\n\n"
            response += "Don't rush it - the prerequisites really do help you succeed in this class."
            
        elif course_code == "CS 30700":
            response += "This is the foundation of the Software Engineering track - you'll love it if you're interested in building real software systems!\n\n"
            response += "You can take this starting in fall of third year, once you've got your programming foundations solid. It's designed to teach you how to work on larger projects and collaborate with teams.\n\n"
            response += "Really practical stuff that you'll use in internships and your career!"
            
        elif course_code.startswith("CS") and timing == "track_course":
            response += "This is a track course, which means you can take it starting in fall of your third year.\n\n"
            response += "The timing is flexible - you might take it in third year or fourth year depending on your track plan and what else you're juggling that semester.\n\n"
            
        elif "1st Year" in timing:
            response += "This is a first-year course, so you'll take it early in your CS journey.\n\n"
            
        elif "2nd Year" in timing:
            response += "This fits into your second year schedule.\n\n"
            
        elif "3rd Year" in timing:
            response += "This is a third-year course.\n\n"
        
        if prereqs:
            response += f"\nJust so you know, you'll need these courses first: {', '.join(prereqs)}. "
            response += "Don't worry about memorizing all the prerequisites - your advisor and the registration system will help keep you on track!"
        
        encouragement = random.choice(self.encouragement)
        response += f"\n\n{encouragement}"
        
        return {
            "query": query,
            "response": response,
            "confidence": 0.90,
            "track": track_context,
            "source_data": {"course": code, "timing": timing, "prerequisites": prereqs}
        }
    
    def _handle_requirements_question(self, query: str, track_context: str) -> dict:
        """Handle questions about track requirements"""
        
        greeting = random.choice(self.greetings)
        
        if not track_context:
            if "mi" in query.lower() or "machine intelligence" in query.lower():
                track_context = "MI"
            elif "se" in query.lower() or "software engineering" in query.lower():
                track_context = "SE"
            else:
                return {
                    "query": query,
                    "response": f"{greeting} I'd be happy to explain the requirements! Are you asking about the Machine Intelligence track or Software Engineering track? Or maybe general CS requirements?",
                    "confidence": 0.5,
                    "track": None
                }
        
        if track_context.upper() == "MI":
            response = f"{greeting} The Machine Intelligence track is really exciting - you'll get into AI, machine learning, and data science!\n\n"
            
            transition = random.choice(self.transitions)
            response += f"{transition}\n\n"
            
            response += "You'll need 4 required courses plus 2 electives. Don't let that number worry you - it's totally doable!\n\n"
            
            response += "For the required courses:\n"
            response += "- CS 37300 (Data Mining & Machine Learning) - this is the heart of the track\n"
            response += "- CS 38100 (Algorithms) - you'll take this fall of third year\n"
            response += "- One AI course: either CS 47100 (Intro to AI) or CS 47300 (Web Search)\n"
            response += "- One statistics course: STAT 35000, STAT 51100, or a few other options\n\n"
            
            response += "Then you get to pick 2 electives from a really nice selection. You could go deeper into AI with CS 57700 (Natural Language Processing), explore data visualization with CS 43900, or try something completely different!\n\n"
            
            response += "The cool thing is you have flexibility in when you take most of these. Just remember you can't double-count courses - if you use CS 47300 for your AI requirement, you can't also count it as an elective."
            
        elif track_context.upper() == "SE":
            response = f"{greeting} Software Engineering is an awesome track - you'll learn how to build real-world software systems that people actually use!\n\n"
            
            transition = random.choice(self.transitions)
            response += f"{transition}\n\n"
            
            response += "You'll need 5 required courses plus 1 elective. I know that sounds like more than MI track, but remember you only need 1 elective instead of 2.\n\n"
            
            response += "Your required courses are:\n"
            response += "- CS 30700 (Software Engineering I) - teaches you the fundamentals\n"
            response += "- CS 38100 (Algorithms) - fall of third year\n"
            response += "- CS 40800 (Software Testing) - super practical!\n"
            response += "- CS 40700 (Senior Project) - you'll build something real\n"
            response += "- One systems course: either CS 35200 (Compilers) or CS 35400 (Operating Systems)\n\n"
            
            response += "Then you pick 1 elective. You could dive into security with CS 42600, learn about databases with CS 44800, or even try some AI courses if that interests you!\n\n"
            
            response += "The senior project is really cool because you can sometimes substitute it with EPICS (real community projects) if you get approval."
            
        else:
            response = f"{greeting} I'm not sure which track you're asking about. Could you specify MI (Machine Intelligence) or SE (Software Engineering)?"
            return {
                "query": query,
                "response": response,
                "confidence": 0.3,
                "track": track_context
            }
        
        encouragement = random.choice(self.encouragement)
        response += f"\n\n{encouragement} Feel free to ask if you want me to dive deeper into any of these courses!"
        
        return {
            "query": query,
            "response": response,
            "confidence": 0.95,
            "track": track_context,
            "source_data": {"track": track_context, "type": "requirements"}
        }
    
    def _handle_planning_question(self, query: str, track_context: str) -> dict:
        """Handle course planning questions"""
        
        greeting = random.choice(self.greetings)
        
        if not track_context:
            return {
                "query": query,
                "response": f"{greeting} I'd love to help you plan out your courses! Which track are you thinking about - Machine Intelligence or Software Engineering?",
                "confidence": 0.5,
                "track": None
            }
        
        transition = random.choice(self.transitions)
        
        if track_context.upper() == "MI":
            response = f"{greeting} Planning out your Machine Intelligence track? Smart move - having a roadmap makes everything so much less stressful!\n\n"
            response += f"{transition}\n\n"
            
            response += "Years 1-2: Focus on building that rock-solid foundation. You'll do all your CS fundamentals (CS 18000 through CS 25200) plus your math sequence. Don't worry about track stuff yet - you're building the skills you'll need later!\n\n"
            
            response += "Fall of Year 3: This is when things get exciting! Take CS 38100 (algorithms), a statistics course, and your first track course. I'd recommend starting with CS 37300 if you can fit it.\n\n"
            
            response += "Spring of Year 3: Continue with track courses. Maybe grab your AI requirement (CS 47100 or CS 47300) or start on electives.\n\n"
            
            response += "Year 4: Finish up your remaining track requirements and electives. You'll have some flexibility here to explore what interests you most!\n\n"
            
            response += "Pro tip: Don't stress too much about the exact timing. Your advisor will help you figure out what works best with your schedule and interests."
            
        elif track_context.upper() == "SE":
            response = f"{greeting} Software Engineering track planning coming right up! This track has a really nice flow to it.\n\n"
            response += f"{transition}\n\n"
            
            response += "Years 1-2: Same foundation as everyone else - CS 18000 through CS 25200 plus your math. Think of this as learning your programming languages and basic tools.\n\n"
            
            response += "Fall of Year 3: Take CS 38100 (algorithms) and start your track with CS 30700 (Software Engineering I). This is where you learn how to work on bigger projects!\n\n"
            
            response += "After CS 30700: You can take CS 40800 (Software Testing). The nice thing is these build on each other logically.\n\n"
            
            response += "Later semesters: Fit in your systems choice (compilers or operating systems), your senior project, and your elective. The senior project is really cool - you might even be able to do EPICS instead!\n\n"
            
            response += "The SE track is great because everything connects. You learn the theory, then practice it, then do a real project. Very hands-on!"
        
        encouragement = random.choice(self.encouragement)
        response += f"\n\n{encouragement} Want me to go deeper into any part of this plan?"
        
        return {
            "query": query,
            "response": response,
            "confidence": 0.95,
            "track": track_context,
            "source_data": {"track": track_context, "type": "planning"}
        }
    
    def _handle_advice_question(self, query: str, track_context: str) -> dict:
        """Handle advice/permission questions"""
        
        greeting = random.choice(self.greetings)
        
        query_lower = query.lower()
        
        # Check for common scenarios
        if "sophomore" in query_lower and any(course in query_lower for course in ["cs 37300", "track course"]):
            response = f"{greeting} I can see why you'd want to jump into the cool stuff early, but unfortunately track courses like CS 37300 have to wait until third year.\n\n"
            response += "Here's why: CS 37300 needs CS 25100 (Data Structures) and a statistics course as prerequisites. You'll take CS 25100 in fall of sophomore year, and statistics typically happens in fall of junior year.\n\n"
            response += "I know it's frustrating to wait, but trust me - having those prerequisites makes CS 37300 so much more manageable and enjoyable. Use sophomore year to really nail those fundamentals!\n\n"
            response += "The good news? Once you hit junior year, you'll have tons of exciting courses to choose from."
            
        elif "cs 38100" in query_lower and ("early" in query_lower or "sophomore" in query_lower):
            response = f"{greeting} CS 38100 is such an important course, and I totally understand wanting to take it early!\n\n"
            response += "Unfortunately, you'll need to wait until fall of third year. It requires CS 25100 (Data Structures), and the concepts really do build on each other.\n\n"
            response += "Think of it this way: CS 25100 teaches you the tools, and CS 38100 teaches you how to use those tools efficiently. Trying to learn algorithms without solid data structures knowledge is like trying to cook without knowing your ingredients!\n\n"
            response += "The wait is worth it though - CS 38100 opens up almost all the advanced courses you'll want to take."
            
        elif "double count" in query_lower or "both required and elective" in query_lower:
            response = f"{greeting} Nope, you can't double-count courses between required and elective slots. I know it's tempting!\n\n"
            response += "For example, if you use CS 47300 to satisfy your AI requirement in MI track, you can't also count it as one of your 2 electives. You'll need to pick a different course for your elective.\n\n"
            response += "The good news is there are plenty of interesting electives to choose from, so you won't run out of options!"
            
        elif "switch tracks" in query_lower:
            response = f"{greeting} You can definitely switch tracks! It's more common than you might think.\n\n"
            response += "The best part is that most of your foundation courses count for any track, so you're not starting over. You might just need to adjust which track-specific courses you take.\n\n"
            response += "I'd recommend talking to your academic advisor about the switch - they can help you figure out the smoothest path forward."
            
        else:
            response = f"{greeting} I'd be happy to give you some advice! Could you be a bit more specific about what you're wondering about? Are you asking about course timing, track choices, or something else?"
            return {
                "query": query,
                "response": response,
                "confidence": 0.4,
                "track": track_context
            }
        
        encouragement = random.choice(self.encouragement)
        response += f"\n\n{encouragement}"
        
        return {
            "query": query,
            "response": response,
            "confidence": 0.90,
            "track": track_context,
            "source_data": {"type": "advice"}
        }
    
    def _handle_comparison_question(self, query: str, track_context: str) -> dict:
        """Handle track comparison questions"""
        
        greeting = random.choice(self.greetings)
        
        response = f"{greeting} Great question! MI and SE are both awesome tracks, but they have pretty different focuses.\n\n"
        
        response += "Machine Intelligence is all about AI, machine learning, and data science. If you're excited about teaching computers to learn patterns, working with big datasets, or building intelligent systems, MI is your track. You'll learn algorithms that can recognize images, process language, and make predictions from data.\n\n"
        
        response += "Software Engineering focuses on building robust, real-world software systems. Think about how to design apps that millions of people use, how to test code properly, and how to work effectively in teams. If you love the idea of creating software that solves real problems and scales to lots of users, SE is perfect.\n\n"
        
        response += "Structure-wise, MI needs 4 required courses plus 2 electives, while SE needs 5 required courses plus 1 elective. So MI gives you a bit more flexibility to explore different areas.\n\n"
        
        response += "Career-wise, MI grads often become data scientists, ML engineers, or AI researchers. SE grads typically become software developers, DevOps engineers, or technical leads at tech companies.\n\n"
        
        response += "Honestly, you can't go wrong with either one! Both tracks teach super valuable skills and lead to great career opportunities. What kinds of problems get you excited - data and AI, or building software systems?"
        
        return {
            "query": query,
            "response": response,
            "confidence": 0.95,
            "track": "comparison",
            "source_data": {"type": "track_comparison"}
        }
    
    def _handle_general_question(self, query: str, track_context: str) -> dict:
        """Handle general questions"""
        
        greeting = random.choice(self.greetings)
        
        response = f"{greeting} I'm here to help you navigate the CS program at Purdue!\n\n"
        response += "I can help you with things like:\n"
        response += "- When to take specific courses\n"
        response += "- Track requirements for MI and SE\n"
        response += "- Course planning and sequencing\n"
        response += "- Prerequisites and timing questions\n"
        response += "- Comparing different tracks\n\n"
        
        response += "What would you like to know? Feel free to ask about specific courses, track planning, or anything else CS-related!"
        
        return {
            "query": query,
            "response": response,
            "confidence": 0.6,
            "track": track_context,
            "source_data": {"type": "general"}
        }

# Integration function for existing system
def create_friendly_advisor(knowledge_graph):
    """Create friendly advisor instance"""
    return FriendlyStudentAdvisor(knowledge_graph)

# Update the main system to use friendly responses
def update_response_system():
    """Update the main system to use friendly advisor"""
    
    print("🤖 Updating Response System to Friendly Advisor Mode")
    print("=" * 60)
    
    # This would integrate with your existing system
    print("✅ Friendly advisor mode activated!")
    print("✅ Removed all markdown formatting")
    print("✅ Added encouraging, supportive tone")
    print("✅ Natural conversation style enabled")
    
    return True

if __name__ == "__main__":
    # Test the friendly advisor
    from knowledge_graph_system import KnowledgeGraph
    
    kg = KnowledgeGraph()
    advisor = FriendlyStudentAdvisor(kg)
    
    # Test queries
    test_queries = [
        "When should I take CS 38100?",
        "What are the requirements for MI track?",
        "Can I take CS 37300 in sophomore year?",
        "What's the difference between MI and SE tracks?"
    ]
    
    print("🧪 Testing Friendly Advisor Responses")
    print("=" * 50)
    
    for query in test_queries:
        print(f"\nQ: {query}")
        response = advisor.generate_response(query)
        print(f"A: {response['response'][:200]}...")
        print(f"Confidence: {response['confidence']:.2f}")