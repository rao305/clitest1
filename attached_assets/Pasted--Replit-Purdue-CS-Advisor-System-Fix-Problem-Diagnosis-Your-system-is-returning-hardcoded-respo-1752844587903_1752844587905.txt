# Replit Purdue CS Advisor System Fix

## Problem Diagnosis
Your system is returning hardcoded responses instead of processing user queries through the knowledge base. Here's how to fix it:

## 1. Query Classification System (Priority Fix)

### Current Issue:
```javascript
// This is probably failing:
const intent = classifyQuery(userMessage);
// Returns undefined or defaults to generic response
```

### Fix Implementation:
```javascript
// Add robust query classification
function classifyQuery(query) {
  const lowerQuery = query.toLowerCase();
  
  // Junior year planning
  if (lowerQuery.includes('junior') || lowerQuery.includes('3rd year') || 
      lowerQuery.includes('third year') || lowerQuery.includes('what classes') ||
      lowerQuery.includes('what courses') || lowerQuery.includes('junior classes')) {
    return 'junior_year_planning';
  }
  
  // Machine Intelligence track
  if (lowerQuery.includes('machine intelligence') || lowerQuery.includes('mi track') ||
      lowerQuery.includes('ai track') || lowerQuery.includes('machine learning') ||
      lowerQuery.includes('artificial intelligence')) {
    return 'machine_intelligence';
  }
  
  // Software Engineering track
  if (lowerQuery.includes('software engineering') || lowerQuery.includes('se track') ||
      lowerQuery.includes('software development')) {
    return 'software_engineering';
  }
  
  // Prerequisites
  if (lowerQuery.includes('prerequisites') || lowerQuery.includes('prereq') ||
      lowerQuery.includes('can i take') || lowerQuery.includes('when can i take')) {
    return 'prerequisites';
  }
  
  // Track selection
  if (lowerQuery.includes('what track') || lowerQuery.includes('which track') ||
      lowerQuery.includes('track options') || lowerQuery.includes('choose track')) {
    return 'track_selection';
  }
  
  // Default fallback
  return 'general_advising';
}
```

## 2. Knowledge Base Responses

### Replace your current responses with these dynamic ones:

```javascript
const knowledgeResponses = {
  junior_year_planning: (userQuery) => {
    return `Great question! I'm happy to help you plan your junior year in Computer Science!

So here's how it works for CS juniors at Purdue. By your junior year, you should have completed the foundation sequence through CS 25200 (Systems Programming), and now you're ready for the exciting part - track courses and advanced topics!

**Fall of Junior Year (Critical Timing):**
- CS 38100 (Introduction to Algorithms) - this is MANDATORY and must be taken Fall junior year
- STAT 35000 or STAT 51100 (Statistics) - required for many tracks
- Your first track course (once you've chosen your track)

**Spring of Junior Year:**
- Continue with track requirements and electives
- Additional track courses based on your chosen specialization

Here's the deal - you can't start track courses until Fall of junior year because they require completion of the foundation sequence, especially CS 25200. The most popular tracks among students are Machine Intelligence and Software Engineering, but there are 9 total tracks to choose from.

For track planning, you'll need to pick at least one track and complete 6 courses within it. Each track has specific required courses plus electives you can choose from.

What track are you most interested in? I can give you the specific course sequence for Machine Intelligence, Software Engineering, or any of the other tracks. Also, have you completed CS 25200 yet? That'll help me give you more specific timing advice.

You've got this! Feel free to ask about any specific track requirements!`;
  },
  
  machine_intelligence: (userQuery) => {
    return `Awesome choice! Machine Intelligence is one of the most popular tracks at Purdue, and for good reason!

Here's how the MI track works - you'll need 6 courses total: 4 required + 2 electives.

**Required Courses (4):**
1. CS 37300: Data Mining and Machine Learning (the core MI course!)
2. CS 38100: Introduction to Algorithms (Fall junior year - mandatory timing)
3. One AI foundation course (CS 47100 Intro to AI or CS 47300 Web Search)
4. One statistics course (STAT 41600 Probability, MA 41600 Probability, or STAT 51200 Applied Regression)

**Electives (Choose 2 from many options):**
- CS 57700: Natural Language Processing
- CS 57800: Statistical Machine Learning
- CS 43900: Data Visualization
- CS 44000: Large-Scale Data Analytics
- CS 47500: Human-Computer Interactions
- And many more!

**Timing tip:** You can start CS 37300 as early as Fall junior year if you've completed CS 25100 and your statistics requirement. Most students do CS 38100 + STAT 35000 + CS 37300 in Fall junior year.

The cool thing about MI is there's so much flexibility in the electives - you can focus on NLP, computer vision, data analytics, or whatever interests you most!

Have you taken your statistics requirement yet? That's usually the bottleneck for starting CS 37300. Also, what area of AI interests you most?

Don't worry, lots of students ask about this timing - you've got this!`;
  },
  
  general_advising: (userQuery) => {
    return `Great question! I'm happy to help with your CS degree planning!

I can help you with:
- Course timing and prerequisites
- Track selection and requirements
- Junior and senior year planning
- Specific course information
- Degree progression guidance

What specific aspect of the CS program would you like to know about? Whether it's planning your junior year, choosing between Machine Intelligence and Software Engineering tracks, or understanding prerequisite chains - I'm here to help!

Don't worry, lots of students have questions about navigating the CS degree. Feel free to ask about anything!`;
  }
};
```

## 3. Main Response Function Fix

### Replace your current response logic:

```javascript
async function generateResponse(userQuery) {
  try {
    // Step 1: Classify the query
    const intent = classifyQuery(userQuery);
    console.log(`Classified intent: ${intent}`);
    
    // Step 2: Get appropriate response
    const responseGenerator = knowledgeResponses[intent] || knowledgeResponses.general_advising;
    const response = responseGenerator(userQuery);
    
    // Step 3: Log for debugging
    console.log(`Generated response length: ${response.length}`);
    
    return response;
    
  } catch (error) {
    console.error('Error generating response:', error);
    return `I'm here to help with your CS degree planning! What would you like to know about courses, tracks, or degree requirements?`;
  }
}
```

## 4. n8n Webhook Integration Fix

### In your n8n workflow, ensure proper data flow:

```javascript
// n8n HTTP Request node configuration
{
  "method": "POST",
  "url": "YOUR_REPLIT_URL/api/chat",
  "headers": {
    "Content-Type": "application/json"
  },
  "body": {
    "query": "{{ $json.query }}",
    "userId": "{{ $json.userId || 'anonymous' }}",
    "timestamp": "{{ new Date().toISOString() }}"
  }
}
```

### In your Replit Express server:

```javascript
app.post('/api/chat', async (req, res) => {
  try {
    const { query, userId } = req.body;
    
    // Log incoming request
    console.log('Received query:', query);
    
    // Generate response
    const response = await generateResponse(query);
    
    // Return formatted response
    res.json({
      success: true,
      response: response,
      timestamp: new Date().toISOString(),
      userId: userId
    });
    
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      response: 'Sorry, I encountered an error. Please try again!'
    });
  }
});
```

## 5. Testing and Debugging

### Add these test queries to verify fixes:

```javascript
// Test queries for debugging
const testQueries = [
  "i would like to major in computer science what are some classes that i should be taking as a junior",
  "tell me about machine intelligence track",
  "what are prerequisites for cs 38100",
  "how do i choose between se and mi tracks",
  "when can i start taking track courses"
];

// Test function
function testClassification() {
  testQueries.forEach(query => {
    const intent = classifyQuery(query);
    console.log(`Query: "${query}" -> Intent: ${intent}`);
  });
}
```

## 6. Error Handling and Logging

### Add comprehensive logging:

```javascript
function logInteraction(query, intent, response) {
  const logEntry = {
    timestamp: new Date().toISOString(),
    query: query,
    intent: intent,
    responseLength: response.length,
    success: true
  };
  
  console.log('Interaction Log:', JSON.stringify(logEntry, null, 2));
  
  // Optional: Store in database for analytics
  // await storeInteraction(logEntry);
}
```

## 7. Performance Optimization

### Cache responses for common queries:

```javascript
const responseCache = new Map();

function getCachedResponse(query) {
  const cacheKey = query.toLowerCase().trim();
  return responseCache.get(cacheKey);
}

function setCachedResponse(query, response) {
  const cacheKey = query.toLowerCase().trim();
  responseCache.set(cacheKey, response);
}
```

## 8. Deployment Checklist

### Before going live:

1. **Test all sample queries** from the React demo
2. **Verify n8n webhook** is receiving and processing requests
3. **Check console logs** for classification accuracy
4. **Test fallback responses** for unknown queries
5. **Monitor response times** (should be under 1 second)
6. **Verify tone and personality** matches target style

## 9. Environment Variables

### Add these to your Replit secrets:

```
OPENAI_API_KEY=your_key_here
NODE_ENV=production
PORT=3000
WEBHOOK_URL=your_n8n_webhook_url
```

## 10. Monitoring and Analytics

### Add response quality tracking:

```javascript
function trackResponseQuality(query, response, intent) {
  const metrics = {
    queryLength: query.length,
    responseLength: response.length,
    intent: intent,
    timestamp: Date.now(),
    containsPersonality: response.includes("Great question!") || response.includes("You've got this!")
  };
  
  console.log('Quality Metrics:', metrics);
  return metrics;
}
```

## Implementation Steps:

1. **Replace query classification** with the robust function above
2. **Update knowledge responses** with the natural, encouraging tone
3. **Fix n8n webhook integration** to pass queries properly
4. **Add comprehensive logging** for debugging
5. **Test with all sample queries** from the React demo
6. **Monitor and iterate** based on real user interactions

This should fix your hardcoded response issue and give you the natural, helpful AI advisor responses you're looking for!