I am building BoilerAI, a CLI-based chatbot academic advisor for Purdue University Computer Science students. It uses SQLite for data storage, a knowledge graph for course relationships, NLP for query processing, and web scraping for data collection. The goal is to recommend courses and answer any question related to the CS department or major, but it currently relies on a template-based design and lacks advanced intelligence. Please provide a detailed overview of the current technical implementation, including:

1. **Tech Stack**:
   - Programming language(s) and frameworks used (e.g., Python, specific libraries like networkx, nltk, or Hugging Face).
   - Details of the SQLite database setup (e.g., schema for courses, student profiles, or other tables).
   - Knowledge graph implementation (e.g., library used, structure of nodes/edges, how it’s queried).
   - NLP tools or models (e.g., specific libraries, pretrained models, or custom training).
   - Web scraping setup (e.g., tools like BeautifulSoup, Scrapy, or data sources like Purdue’s CS website).

2. **Current Functionality**:
   - How course recommendations are generated (e.g., rule-based logic, graph queries).
   - How NLP processes user queries (e.g., intent recognition, entity extraction).
   - Types of questions BoilerAI can answer (e.g., course recommendations, prerequisites).
   - Example of a typical interaction (e.g., user input and chatbot output).

3. **Data Sources**:
   - Details of scraped data (e.g., Purdue CS website, course catalog, or external sources like RateMyProfessors).
   - How data is stored and updated in SQLite or the knowledge graph.

4. **Limitations**:
   - Specific issues with the template-based design (e.g., rigid rules, limited query handling).
   - Challenges with NLP (e.g., handling ambiguous queries).
   - Gaps in the knowledge graph or database (e.g., missing relationships, incomplete data).
   - Any errors or failures in answering CS-related questions.

5. **Future Goals**:
   - Planned features to make BoilerAI smarter (e.g., multi-semester planning, better NLP).
   - Any specific areas where the system struggles to answer CS department or major-related questions.

Please structure the response clearly, using bullet points or sections, and include code snippets where relevant (e.g., database schema, recommendation logic, or NLP setup). Be as specific as possible to help clarify the project’s current state.