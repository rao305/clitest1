{
  "name": "Purdue CS Track AI Training Pipeline",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 */6 * * *"
            }
          ]
        }
      },
      "name": "Data Refresh Schedule",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "webhook-purdue-cs",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "User Query Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        500
      ],
      "webhookId": "purdue-cs-query"
    },
    {
      "parameters": {
        "url": "={{ $node[\"Environment Config\"].json[\"knowledge_graph_url\"] }}/api/load-data",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "name": "Load Knowledge Graph Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{ $node[\"Environment Config\"].json[\"knowledge_graph_url\"] }}/api/query",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.body.query }}"
            },
            {
              "name": "track_context",
              "value": "={{ $json.body.track_context || null }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "name": "Process Query via Knowledge Graph",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        460,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.body.confidence }}",
              "operation": "larger",
              "value2": 0.8
            }
          ]
        }
      },
      "name": "High Confidence Response?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        500
      ]
    },
    {
      "parameters": {
        "url": "https://api.anthropic.com/v1/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-api-key",
              "value": "={{ $node[\"Environment Config\"].json[\"anthropic_api_key\"] }}"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-sonnet-4-20250514"
            },
            {
              "name": "max_tokens",
              "value": 1000
            },
            {
              "name": "messages",
              "value": "=[{\n  \"role\": \"user\",\n  \"content\": `You are an AI assistant for Purdue CS track information. Use ONLY the provided knowledge graph data to answer questions. Do not use any external knowledge.\n\nKnowledge Graph Data:\n${JSON.stringify($node[\"Process Query via Knowledge Graph\"].json.body.source_data, null, 2)}\n\nUser Query: ${$node[\"User Query Webhook\"].json.body.query}\n\nBased ONLY on the knowledge graph data above, provide a helpful and accurate response. If the data doesn't contain enough information to answer the query, say so.`\n}]"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "name": "Claude AI Enhancement",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        900,
        580
      ]
    },
    {
      "parameters": {
        "url": "={{ $node[\"Environment Config\"].json[\"knowledge_graph_url\"] }}/api/training-data",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "name": "Get Training Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "const trainingData = $input.all()[0].json.body.training_data;\nconst anthropicApiKey = $node[\"Environment Config\"].json[\"anthropic_api_key\"];\n\n// Process training data into Claude-compatible format\nconst processedData = trainingData.map(item => ({\n  query: item.query,\n  response: item.response,\n  track: item.track,\n  confidence: item.confidence,\n  sourceData: item.source_data\n}));\n\n// Group by track for better training\nconst trainingByTrack = {\n  MI: processedData.filter(item => item.track === 'MI'),\n  SE: processedData.filter(item => item.track === 'SE'),\n  comparison: processedData.filter(item => item.track === 'comparison')\n};\n\n// Create training prompt for Claude\nconst trainingPrompt = `You are being trained as a Purdue CS track advisor. Use ONLY the following data to answer questions about Purdue CS tracks.\n\nTraining Data:\n${JSON.stringify({\n  machine_intelligence_examples: trainingByTrack.MI.slice(0, 20),\n  software_engineering_examples: trainingByTrack.SE.slice(0, 20),\n  comparison_examples: trainingByTrack.comparison.slice(0, 10)\n}, null, 2)}\n\nRules:\n1. Use ONLY the information provided in the training data\n2. Do not make up or hallucinate course information\n3. If you don't have enough data to answer, say so\n4. Always cite the source data when providing responses\n5. Be accurate about course codes, titles, and requirements`;\n\nreturn {\n  trainingPrompt,\n  processedData,\n  trainingByTrack,\n  totalExamples: processedData.length\n};"
      },
      "name": "Process Training Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://api.anthropic.com/v1/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-api-key",
              "value": "={{ $node[\"Environment Config\"].json[\"anthropic_api_key\"] }}"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-sonnet-4-20250514"
            },
            {
              "name": "max_tokens",
              "value": 100
            },
            {
              "name": "messages",
              "value": "=[{\n  \"role\": \"user\",\n  \"content\": $json.trainingPrompt + \"\\n\\nRespond with 'Training acknowledged' if you understand.\"\n}]"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "name": "Train Claude AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Merge responses from different paths\nconst userQuery = $node[\"User Query Webhook\"].json.body;\nconst kgResponse = $node[\"Process Query via Knowledge Graph\"].json.body;\nconst isHighConfidence = $node[\"High Confidence Response?\"].json;\n\nlet finalResponse;\n\nif (isHighConfidence && kgResponse.confidence > 0.8) {\n  // Use knowledge graph response directly\n  finalResponse = {\n    response: kgResponse.response,\n    confidence: kgResponse.confidence,\n    source: \"knowledge_graph\",\n    track: kgResponse.track,\n    source_data: kgResponse.source_data\n  };\n} else {\n  // Use Claude AI enhanced response\n  const claudeResponse = $node[\"Claude AI Enhancement\"]?.json?.body?.content?.[0]?.text;\n  finalResponse = {\n    response: claudeResponse || kgResponse.response,\n    confidence: claudeResponse ? 0.95 : kgResponse.confidence,\n    source: claudeResponse ? \"claude_enhanced\" : \"knowledge_graph\",\n    track: kgResponse.track,\n    source_data: kgResponse.source_data\n  };\n}\n\nreturn {\n  query: userQuery.query,\n  track_context: userQuery.track_context,\n  ...finalResponse,\n  timestamp: new Date().toISOString(),\n  processing_time: Date.now() - (userQuery.timestamp || Date.now())\n};"
      },
      "name": "Merge Responses",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        500
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json, null, 2) }}"
      },
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1340,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "// Environment configuration\nreturn {\n  knowledge_graph_url: $vars.KNOWLEDGE_GRAPH_URL || 'http://localhost:5000',\n  anthropic_api_key: $vars.ANTHROPIC_API_KEY || process.env.ANTHROPIC_API_KEY,\n  database_path: $vars.DATABASE_PATH || './purdue_cs_knowledge.db',\n  debug_mode: $vars.DEBUG_MODE === 'true',\n  confidence_threshold: parseFloat($vars.CONFIDENCE_THRESHOLD) || 0.8\n};"
      },
      "name": "Environment Config",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        100
      ]
    },
    {
      "parameters": {
        "url": "={{ $node[\"Environment Config\"].json[\"knowledge_graph_url\"] }}/api/knowledge-graph/stats",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "name": "Get Knowledge Graph Stats",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        460,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.body.status }}",
              "value2": "success"
            }
          ]
        }
      },
      "name": "Data Load Success?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        680,
        100
      ]
    },
    {
      "parameters": {
        "message": ":white_check_mark: Purdue CS Knowledge Graph Updated\\n\\nStats:\\n- MI Courses: {{ $node[\"Get Knowledge Graph Stats\"].json.body.courses_by_track.MI || 0 }}\\n- SE Courses: {{ $node[\"Get Knowledge Graph Stats\"].json.body.courses_by_track.SE || 0 }}\\n- Training Examples: {{ $node[\"Get Knowledge Graph Stats\"].json.body.training_data_count }}\\n- Knowledge Edges: {{ $node[\"Get Knowledge Graph Stats\"].json.body.knowledge_edges }}\\n\\nNext refresh in 6 hours.",
        "channel": "#purdue-cs-ai",
        "username": "n8n"
      },
      "name": "Slack Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [
        900,
        100
      ]
    }
  ],
  "connections": {
    "Data Refresh Schedule": {
      "main": [
        [
          {
            "node": "Load Knowledge Graph Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Query Webhook": {
      "main": [
        [
          {
            "node": "Process Query via Knowledge Graph",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Knowledge Graph Data": {
      "main": [
        [
          {
            "node": "Get Knowledge Graph Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Query via Knowledge Graph": {
      "main": [
        [
          {
            "node": "High Confidence Response?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "High Confidence Response?": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Claude AI Enhancement",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude AI Enhancement": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Training Data": {
      "main": [
        [
          {
            "node": "Process Training Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Training Data": {
      "main": [
        [
          {
            "node": "Train Claude AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Responses": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Environment Config": {
      "main": [
        [
          {
            "node": "Get Knowledge Graph Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Knowledge Graph Stats": {
      "main": [
        [
          {
            "node": "Data Load Success?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Training Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Load Success?": {
      "main": [
        [
          {
            "node": "Slack Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1",
  "id": "purdue-cs-ai-pipeline",
  "meta": {
    "instanceId": "purdue-cs-knowledge-system"
  }
}