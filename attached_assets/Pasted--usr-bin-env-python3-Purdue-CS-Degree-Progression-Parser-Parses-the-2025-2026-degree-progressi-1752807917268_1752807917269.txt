#!/usr/bin/env python3
"""
Purdue CS Degree Progression Parser
Parses the 2025-2026 degree progression guide and updates knowledge graph
"""

import json
import sqlite3
from datetime import datetime
from dataclasses import dataclass, asdict
from typing import Dict, List, Optional, Tuple
import re

@dataclass
class Course:
    code: str
    title: str
    credits: int
    semester: str  # "Fall 1st Year", "Spring 2nd Year", etc.
    course_type: str  # "foundation", "math", "statistics", "track", "elective", "science_core"
    prerequisites: List[str]
    corequisites: List[str]
    is_critical: bool = False
    track_applicable: Optional[str] = None  # Which track this applies to
    
    def __post_init__(self):
        if self.prerequisites is None:
            self.prerequisites = []
        if self.corequisites is None:
            self.corequisites = []

@dataclass
class DegreeProgression:
    foundation_courses: List[Course]
    math_courses: List[Course]
    statistics_courses: List[Course]
    science_core_requirements: Dict[str, List[str]]
    track_course_slots: Dict[str, List[str]]  # When track courses can be taken
    all_available_courses: List[Course]
    track_definitions: Dict[str, Dict]

class PurdueProgressionParser:
    def __init__(self):
        self.progression = DegreeProgression(
            foundation_courses=[],
            math_courses=[],
            statistics_courses=[],
            science_core_requirements={},
            track_course_slots={},
            all_available_courses=[],
            track_definitions={}
        )
        
    def parse_pdf_data(self):
        """Parse the degree progression data from the PDF"""
        
        # Foundation Courses (required for all CS majors)
        foundation_courses = [
            Course("CS 18000", "Problem Solving and Object-Oriented Programming", 4, 
                   "Fall 1st Year", "foundation", [], ["MA 16100"], True),
            Course("CS 18200", "Foundations of Computer Science", 3, 
                   "Spring 1st Year", "foundation", ["CS 18000", "MA 16100"], [], True),
            Course("CS 24000", "Programming in C", 3, 
                   "Spring 1st Year", "foundation", ["CS 18000"], [], True),
            Course("CS 25000", "Computer Architecture", 4, 
                   "Fall 2nd Year", "foundation", ["CS 18200", "CS 24000"], [], True),
            Course("CS 25100", "Data Structures", 3, 
                   "Fall 2nd Year", "foundation", ["CS 18200", "CS 24000"], [], True),
            Course("CS 25200", "Systems Programming", 4, 
                   "Spring 2nd Year", "foundation", ["CS 25000", "CS 25100"], [], True),
        ]
        
        # Math Requirements
        math_courses = [
            Course("MA 16100", "Calculus I", 5, "Fall 1st Year", "math", ["ALEKS 85+"], [], True),
            Course("MA 16500", "Calculus I (Honors)", 5, "Fall 1st Year", "math", ["ALEKS 85+"], [], True),
            Course("MA 16200", "Calculus II", 5, "Spring 1st Year", "math", ["MA 16100"], [], True),
            Course("MA 16600", "Calculus II (Honors)", 5, "Spring 1st Year", "math", ["MA 16500"], [], True),
            Course("MA 26100", "Multivariate Calculus", 4, "Fall 2nd Year", "math", ["MA 16200"], [], True),
            Course("MA 27101", "Multivariate Calculus (Honors)", 5, "Fall 2nd Year", "math", ["MA 16600"], [], True),
            Course("MA 26500", "Linear Algebra", 3, "Spring 2nd Year", "math", ["MA 16200"], ["MA 26100"], True),
            Course("MA 35100", "Linear Algebra (Advanced)", 3, "Spring 2nd Year", "math", ["MA 16200"], ["MA 26100"], True),
        ]
        
        # Statistics Requirement
        statistics_courses = [
            Course("STAT 35000", "Elementary Statistics", 3, "Fall 3rd Year", "statistics", ["MA 16200"], []),
            Course("STAT 51100", "Statistical Methods", 3, "Fall 3rd Year", "statistics", ["MA 16200"], []),
        ]
        
        # Track Course Timing Slots
        track_course_slots = {
            "Fall 3rd Year": ["CS track requirement"],
            "Spring 3rd Year": ["CS track requirement/elective"],
            "Fall 4th Year": ["CS track elective"],
            "Spring 4th Year": ["CS track elective"]
        }
        
        # All Available CS Courses (from PDF pages 3-4)
        all_cs_courses = [
            Course("CS 30700", "Software Engineering I", 3, "track_course", "track", ["CS 25200"], []),
            Course("CS 31400", "Numerical Methods", 3, "track_course", "track", ["MA 26100", "CS 25100"], []),
            Course("CS 33400", "Fundamentals of Computer Graphics", 3, "track_course", "track", ["CS 25100", "MA 26500"], []),
            Course("CS 34800", "Information Systems", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 35100", "Cloud Computing", 3, "track_course", "track", ["CS 25200"], []),
            Course("CS 35200", "Compilers", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 35300", "Principles Of Concurrency and Parallelism", 3, "track_course", "track", ["CS 25200"], []),
            Course("CS 35400", "Operating Systems", 3, "track_course", "track", ["CS 25200"], []),
            Course("CS 35500", "Introduction to Cryptography", 3, "track_course", "track", ["CS 25100", "MA 26500"], []),
            Course("CS 37300", "Data Mining & Machine Learning", 3, "track_course", "track", ["CS 25100", "STAT 35000"], []),
            Course("CS 38100", "Introduction to Algorithms", 3, "Fall 3rd Year", "foundation", ["CS 25100"], []),  # Note: This is actually foundation but taken later
            Course("CS 40700", "Software Engineering Senior Project", 3, "track_course", "track", ["CS 30700"], []),
            Course("CS 40800", "Software Testing", 3, "track_course", "track", ["CS 30700"], []),
            Course("CS 42200", "Computer Networks", 3, "track_course", "track", ["CS 25200"], []),
            Course("CS 42600", "Computer Security", 3, "track_course", "track", ["CS 25200"], []),
            Course("CS 43400", "Advanced Computer Graphics", 3, "track_course", "track", ["CS 33400"], []),
            Course("CS 43900", "Introduction to Data Visualization", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 44000", "Large-Scale Data Analytics", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 44800", "Introduction to Relational Databases", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 45600", "Programming Languages", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 45800", "Introduction to Robotics", 3, "track_course", "track", ["CS 25100", "MA 26500"], []),
            Course("CS 47100", "Introduction to Artificial Intelligence", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 47300", "Web Information Search & Management", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 47500", "Human-Computer Interaction", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 47800", "Introduction to Bioinformatics", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 48300", "Introduction to the Theory of Computation", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 48900", "Embedded Systems", 3, "track_course", "track", ["CS 25200"], []),
            Course("CS 49000-DSO", "Distributed Systems", 3, "track_course", "track", ["CS 25200"], []),
            Course("CS 49000-SWS", "Software Security", 3, "track_course", "track", ["CS 25200"], []),
            Course("CS 49700", "Honors Research Project", 3, "track_course", "track", ["CS 25100"], []),
            Course("CS 51000", "Software Engineering", 3, "track_course", "track", ["CS 30700"], []),
            Course("CS 51400", "Numerical Analysis", 3, "track_course", "track", ["CS 31400"], []),
            Course("CS 51500", "Numerical Linear Algebra", 3, "track_course", "track", ["CS 31400"], []),
            Course("CS 52000", "Computational Methods In Optimization", 3, "track_course", "track", ["CS 31400"], []),
            Course("CS 52500", "Parallel Computing", 3, "track_course", "track", ["CS 35300"], []),
            Course("CS 56000", "Reasoning About Programs", 3, "track_course", "track", ["CS 35200"], []),
            Course("CS 57700", "Natural Language Processing", 3, "track_course", "track", ["CS 37300"], []),
            Course("CS 57800", "Statistical Machine Learning", 3, "track_course", "track", ["CS 37300"], []),
            Course("CS 59000-SRS", "Software Reliability and Security", 3, "track_course", "track", ["CS 30700"], []),
        ]
        
        # Track Definitions (from PDF)
        track_definitions = {
            "computational_science_engineering": {
                "name": "Computational Science and Engineering",
                "code": "CSE",
                "focus_areas": ["numerical_methods", "optimization", "scientific_computing"]
            },
            "computer_graphics_visualization": {
                "name": "Computer Graphics and Visualization", 
                "code": "CGV",
                "focus_areas": ["graphics", "visualization", "human_computer_interaction"]
            },
            "database_information_systems": {
                "name": "Database and Information Systems",
                "code": "DIS", 
                "focus_areas": ["databases", "information_systems", "data_analytics"]
            },
            "algorithmic_foundations": {
                "name": "Algorithmic Foundations",
                "code": "AF",
                "focus_areas": ["algorithms", "theory", "computational_complexity"]
            },
            "machine_intelligence": {
                "name": "Machine Intelligence",
                "code": "MI",
                "focus_areas": ["machine_learning", "artificial_intelligence", "data_mining"]
            },
            "programming_language": {
                "name": "Programming Language",
                "code": "PL",
                "focus_areas": ["compilers", "programming_languages", "language_design"]
            },
            "security": {
                "name": "Security",
                "code": "SEC",
                "focus_areas": ["cybersecurity", "cryptography", "network_security"]
            },
            "software_engineering": {
                "name": "Software Engineering",
                "code": "SE", 
                "focus_areas": ["software_development", "testing", "project_management"]
            },
            "systems_software": {
                "name": "Systems Software",
                "code": "SS",
                "focus_areas": ["operating_systems", "distributed_systems", "computer_architecture"]
            }
        }
        
        # Science Core Requirements
        science_core_requirements = {
            "written_communication": ["ENGL 10600", "ENGL 10800"],
            "technical_writing": ["COM 21700"],  # Recommended
            "computing": ["CS 18000"],  # Satisfied by major
            "foreign_language": ["varies"],  # 0-9 credits
            "general_education": ["varies"],  # 3 courses needed
            "lab_science": ["varies"],  # 2 courses needed
            "science_technology_society": ["varies"],
            "great_issues": ["varies"]
        }
        
        # Update the progression object
        self.progression.foundation_courses = foundation_courses
        self.progression.math_courses = math_courses
        self.progression.statistics_courses = statistics_courses
        self.progression.track_course_slots = track_course_slots
        self.progression.all_available_courses = all_cs_courses
        self.progression.track_definitions = track_definitions
        self.progression.science_core_requirements = science_core_requirements
        
        return self.progression
    
    def update_track_requirements(self):
        """Update track-specific requirements based on corrected information"""
        
        # Machine Intelligence Track - CORRECTED
        mi_track_requirements = {
            "name": "Machine Intelligence Track",
            "code": "MI",
            "foundation_courses": [
                "CS 18000", "CS 18200", "CS 24000", "CS 25000", "CS 25100", "CS 25200"
            ],
            "required_courses": {
                "cs_38100": {
                    "course": "CS 38100",
                    "title": "Introduction to Algorithms",
                    "timing": "Fall 3rd Year",
                    "note": "Required foundation course taken in 3rd year"
                },
                "data_mining_ml": {
                    "course": "CS 37300",
                    "title": "Data Mining & Machine Learning", 
                    "timing": "track_course_slot",
                    "note": "Core MI track requirement"
                },
                "ai_choice": {
                    "description": "AI Foundation Choice",
                    "options": ["CS 47100", "CS 47300"],
                    "choose": 1,
                    "timing": "track_course_slot"
                },
                "statistics_choice": {
                    "description": "Statistics Requirement",
                    "options": ["STAT 35000", "STAT 51100", "STAT 41600", "MA 41600", "STAT 51200"],
                    "choose": 1,
                    "timing": "Fall 3rd Year or track_course_slot"
                }
            },
            "elective_requirements": {
                "count": 2,
                "timing": ["track_course_slot", "track_course_slot"],
                "options": [
                    "CS 31100", "CS 41100", "CS 31400", "CS 34800", "CS 35200",
                    "CS 44800", "CS 45600", "CS 45800", "CS 47100", "CS 47300",
                    "CS 48300", "CS 43900", "CS 44000", "CS 47500", "CS 57700", "CS 57800"
                ]
            },
            "special_rules": {
                "competitive_programming": "CS 31100 + CS 41100 together may count as 1 elective",
                "data_group": "From CS 43900/CS 44000/CS 47500, can only pick ONE",
                "no_double_counting": "Cannot use same course for required AND elective"
            }
        }
        
        # Software Engineering Track - CORRECTED  
        se_track_requirements = {
            "name": "Software Engineering Track",
            "code": "SE",
            "foundation_courses": [
                "CS 18000", "CS 18200", "CS 24000", "CS 25000", "CS 25100", "CS 25200"
            ],
            "required_courses": {
                "cs_38100": {
                    "course": "CS 38100",
                    "title": "Introduction to Algorithms",
                    "timing": "Fall 3rd Year",
                    "note": "Required foundation course taken in 3rd year"
                },
                "software_engineering_1": {
                    "course": "CS 30700",
                    "title": "Software Engineering I",
                    "timing": "track_course_slot",
                    "note": "Core SE track requirement"
                },
                "compilers_os_choice": {
                    "description": "Compilers or Operating Systems",
                    "options": ["CS 35200", "CS 35400"],
                    "choose": 1,
                    "timing": "track_course_slot"
                },
                "software_testing": {
                    "course": "CS 40800",
                    "title": "Software Testing",
                    "timing": "track_course_slot",
                    "note": "Required after CS 30700"
                },
                "senior_project": {
                    "course": "CS 40700",
                    "title": "Software Engineering Senior Project",
                    "timing": "track_course_slot",
                    "note": "Capstone project, can be substituted with EPICS"
                }
            },
            "elective_requirements": {
                "count": 1,
                "timing": ["track_course_slot"],
                "options": [
                    "CS 31100", "CS 41100", "CS 34800", "CS 35100", "CS 35200",
                    "CS 35300", "CS 35400", "CS 37300", "CS 42200", "CS 42600",
                    "CS 44800", "CS 45600", "CS 47100", "CS 47300", "CS 48900",
                    "CS 49000-DSO", "CS 49000-SWS", "CS 51000", "CS 59000-SRS"
                ]
            },
            "special_rules": {
                "competitive_programming": "CS 31100 + CS 41100 together satisfy one elective",
                "senior_project_substitute": "EPICS/VIP can replace CS 40700 with track chair approval",
                "epics_requirement": "EPICS must be EPCS 41100+41200 (Senior Design)",
                "no_double_counting": "Cannot use same course for required AND elective"
            }
        }
        
        return {
            "machine_intelligence": mi_track_requirements,
            "software_engineering": se_track_requirements
        }

class ProgressionKnowledgeGraphUpdater:
    def __init__(self, kg_db_path: str = "purdue_cs_knowledge.db"):
        self.db_path = kg_db_path
        self.parser = PurdueProgressionParser()
        
    def update_knowledge_graph(self):
        """Update the knowledge graph with corrected progression data"""
        
        print("🔄 Updating Knowledge Graph with Degree Progression Data...")
        
        # Parse the progression data
        progression = self.parser.parse_pdf_data()
        track_requirements = self.parser.update_track_requirements()
        
        # Clear existing data
        self._clear_existing_data()
        
        # Add foundation courses
        self._add_foundation_courses(progression.foundation_courses)
        
        # Add math courses
        self._add_math_courses(progression.math_courses)
        
        # Add statistics courses
        self._add_statistics_courses(progression.statistics_courses)
        
        # Add all available courses
        self._add_all_courses(progression.all_available_courses)
        
        # Add track definitions
        self._add_track_definitions(progression.track_definitions)
        
        # Add corrected track requirements
        self._add_corrected_track_requirements(track_requirements)
        
        # Add progression timeline
        self._add_progression_timeline(progression)
        
        print("✅ Knowledge Graph updated successfully!")
        
        return {
            "status": "success",
            "foundation_courses_added": len(progression.foundation_courses),
            "math_courses_added": len(progression.math_courses),
            "total_courses_added": len(progression.all_available_courses),
            "tracks_updated": len(track_requirements),
            "timestamp": datetime.now().isoformat()
        }
    
    def _clear_existing_data(self):
        """Clear existing course and track data"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Clear existing tables
        cursor.execute('DELETE FROM courses')
        cursor.execute('DELETE FROM tracks') 
        cursor.execute('DELETE FROM knowledge_edges')
        cursor.execute('DELETE FROM training_data')
        
        conn.commit()
        conn.close()
        
        print("🗑️ Cleared existing knowledge graph data")
    
    def _add_foundation_courses(self, courses: List[Course]):
        """Add foundation courses to knowledge graph"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for course in courses:
            cursor.execute('''
                INSERT OR REPLACE INTO courses 
                (code, title, credits, track, requirement_type, group_id, prerequisites, description)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                course.code, course.title, course.credits, "foundation",
                course.course_type, course.semester, 
                json.dumps(course.prerequisites), 
                f"Critical: {course.is_critical}, Semester: {course.semester}"
            ))
        
        conn.commit()
        conn.close()
        print(f"📚 Added {len(courses)} foundation courses")
    
    def _add_math_courses(self, courses: List[Course]):
        """Add math requirement courses"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for course in courses:
            cursor.execute('''
                INSERT OR REPLACE INTO courses 
                (code, title, credits, track, requirement_type, group_id, prerequisites, description)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                course.code, course.title, course.credits, "math",
                course.course_type, course.semester,
                json.dumps(course.prerequisites),
                f"Critical: {course.is_critical}, Semester: {course.semester}"
            ))
        
        conn.commit()
        conn.close()
        print(f"🔢 Added {len(courses)} math courses")
    
    def _add_statistics_courses(self, courses: List[Course]):
        """Add statistics requirement courses"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for course in courses:
            cursor.execute('''
                INSERT OR REPLACE INTO courses 
                (code, title, credits, track, requirement_type, group_id, prerequisites, description)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                course.code, course.title, course.credits, "statistics",
                course.course_type, course.semester,
                json.dumps(course.prerequisites),
                f"Semester: {course.semester}"
            ))
        
        conn.commit()
        conn.close()
        print(f"📊 Added {len(courses)} statistics courses")
    
    def _add_all_courses(self, courses: List[Course]):
        """Add all available CS courses"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for course in courses:
            cursor.execute('''
                INSERT OR REPLACE INTO courses 
                (code, title, credits, track, requirement_type, group_id, prerequisites, description)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                course.code, course.title, course.credits, "track_available",
                course.course_type, course.semester,
                json.dumps(course.prerequisites),
                f"Available for track selection, Prerequisites: {', '.join(course.prerequisites)}"
            ))
        
        conn.commit()
        conn.close()
        print(f"🎯 Added {len(courses)} track-available courses")
    
    def _add_track_definitions(self, track_definitions: Dict):
        """Add track definitions"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for track_key, track_info in track_definitions.items():
            cursor.execute('''
                INSERT OR REPLACE INTO tracks 
                (code, name, required_courses, elective_courses, mandatory_courses, 
                 choice_groups, elective_options, special_rules)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                track_info['code'], track_info['name'], 0, 0,
                json.dumps([]), json.dumps({}),
                json.dumps([]), json.dumps({"focus_areas": track_info['focus_areas']})
            ))
        
        conn.commit()
        conn.close()
        print(f"🎯 Added {len(track_definitions)} track definitions")
    
    def _add_corrected_track_requirements(self, track_requirements: Dict):
        """Add corrected track requirements"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for track_key, track_data in track_requirements.items():
            # Update track with correct requirements
            cursor.execute('''
                UPDATE tracks 
                SET required_courses = ?, elective_courses = ?, mandatory_courses = ?,
                    choice_groups = ?, elective_options = ?, special_rules = ?
                WHERE code = ?
            ''', (
                len(track_data['required_courses']),
                track_data['elective_requirements']['count'],
                json.dumps(track_data['foundation_courses']),
                json.dumps(track_data['required_courses']),
                json.dumps(track_data['elective_requirements']['options']),
                json.dumps(track_data['special_rules']),
                track_data['code']
            ))
        
        conn.commit()
        conn.close()
        print(f"✅ Updated {len(track_requirements)} tracks with corrected requirements")
    
    def _add_progression_timeline(self, progression: DegreeProgression):
        """Add progression timeline information"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Create progression timeline table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS progression_timeline (
                id TEXT PRIMARY KEY,
                semester TEXT,
                year INTEGER,
                course_slots TEXT,
                requirements TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Add semester progression data
        timeline_data = [
            ("fall_1", "Fall 1st Year", 1, ["CS 18000", "MA 16100", "Science Core"], "Foundation start"),
            ("spring_1", "Spring 1st Year", 1, ["CS 18200", "CS 24000", "MA 16200"], "Programming foundations"),
            ("fall_2", "Fall 2nd Year", 2, ["CS 25000", "CS 25100", "MA 26100"], "Systems foundations"),
            ("spring_2", "Spring 2nd Year", 2, ["CS 25200", "MA 26500"], "Advanced programming"),
            ("fall_3", "Fall 3rd Year", 3, ["CS 38100", "STAT course", "Track requirement"], "Algorithms + Track start"),
            ("spring_3", "Spring 3rd Year", 3, ["Track requirement/elective"], "Track specialization"),
            ("fall_4", "Fall 4th Year", 4, ["Track elective"], "Advanced track courses"),
            ("spring_4", "Spring 4th Year", 4, ["Track elective"], "Capstone/specialization")
        ]
        
        for timeline_id, semester, year, slots, requirements in timeline_data:
            cursor.execute('''
                INSERT OR REPLACE INTO progression_timeline 
                (id, semester, year, course_slots, requirements)
                VALUES (?, ?, ?, ?, ?)
            ''', (timeline_id, semester, year, json.dumps(slots), requirements))
        
        conn.commit()
        conn.close()
        print("📅 Added progression timeline data")

def generate_training_data_from_progression():
    """Generate comprehensive training data from the progression information"""
    
    training_data = [
        {
            "query": "When should I take CS 38100?",
            "response": "CS 38100 (Introduction to Algorithms) should be taken in Fall of your 3rd year. It requires CS 25100 (Data Structures) as a prerequisite, which you take in Fall of 2nd year.",
            "track": "foundation",
            "confidence": 0.95,
            "source_data": {
                "course": "CS 38100",
                "timing": "Fall 3rd Year",
                "prerequisites": ["CS 25100"]
            }
        },
        {
            "query": "What are the foundation courses I need before track courses?",
            "response": "Before taking track courses, you need these foundation courses: CS 18000 (Fall 1st), CS 18200 (Spring 1st), CS 24000 (Spring 1st), CS 25000 (Fall 2nd), CS 25100 (Fall 2nd), CS 25200 (Spring 2nd), and CS 38100 (Fall 3rd). Track courses typically start in Fall 3rd year.",
            "track": "foundation",
            "confidence": 0.95,
            "source_data": {
                "foundation_sequence": ["CS 18000", "CS 18200", "CS 24000", "CS 25000", "CS 25100", "CS 25200", "CS 38100"],
                "track_start_timing": "Fall 3rd Year"
            }
        },
        {
            "query": "When can I start taking Machine Intelligence track courses?",
            "response": "You can start taking Machine Intelligence track courses in Fall of your 3rd year, after completing the foundation sequence through CS 25200. CS 37300 (Data Mining & Machine Learning) is a core MI requirement that can be taken once you have CS 25100 and STAT 35000/51100.",
            "track": "MI",
            "confidence": 0.95,
            "source_data": {
                "track_start": "Fall 3rd Year",
                "core_mi_course": "CS 37300",
                "prerequisites": ["CS 25100", "STAT 35000"]
            }
        },
        {
            "query": "What's the correct sequence for Software Engineering track?",
            "response": "For Software Engineering track: 1) Complete foundation courses through CS 25200 (Spring 2nd year), 2) Take CS 38100 in Fall 3rd year, 3) Take CS 30700 (Software Engineering I) in your track course slot, 4) Take CS 40800 (Software Testing) after CS 30700, 5) Take CS 40700 (Senior Project) in final year, 6) Choose 1 from CS 35200/CS 35400, 7) Choose 1 elective.",
            "track": "SE",
            "confidence": 0.95,
            "source_data": {
                "sequence": ["foundation_courses", "CS 38100", "CS 30700", "CS 40800", "CS 40700"],
                "choice_requirement": ["CS 35200", "CS 35400"],
                "elective_count": 1
            }
        },
        {
            "query": "Can I take CS 37300 in my second year?",
            "response": "No, you cannot take CS 37300 (Data Mining & Machine Learning) in your second year. It requires CS 25100 (Data Structures) and STAT 35000/51100 as prerequisites. CS 25100 is taken in Fall 2nd year, and statistics courses are taken in Fall 3rd year, so CS 37300 can earliest be taken in Spring 3rd year or later.",
            "track": "general",
            "confidence": 0.95,
            "source_data": {
                "course": "CS 37300",
                "prerequisites": ["CS 25100", "STAT 35000"],
                "earliest_timing": "Spring 3rd Year"
            }
        }
    ]
    
    return training_data

def main():
    """Main function to update the knowledge graph with progression data"""
    print("🎓 Purdue CS Degree Progression Knowledge Graph Updater")
    print("=" * 60)
    
    # Initialize the updater
    updater = ProgressionKnowledgeGraphUpdater()
    
    # Update the knowledge graph
    result = updater.update_knowledge_graph()
    
    # Generate training data
    print("\n🤖 Generating Training Data...")
    training_data = generate_training_data_from_progression()
    
    # Store training data
    conn = sqlite3.connect(updater.db_path)
    cursor = conn.cursor()
    
    for data in training_data:
        training_id = f"progression_{datetime.now().timestamp()}_{hash(data['query'])}"
        cursor.execute('''
            INSERT INTO training_data (id, query, response, track, confidence, source_data, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            training_id, data['query'], data['response'], data['track'],
            data['confidence'], json.dumps(data['source_data']), datetime.now().isoformat()
        ))
    
    conn.commit()
    conn.close()
    
    print(f"✅ Added {len(training_data)} progression-based training examples")
    
    # Print summary
    print("\n" + "=" * 60)
    print("📊 UPDATE SUMMARY")
    print("=" * 60)
    print(f"✅ Foundation courses: {result['foundation_courses_added']}")
    print(f"✅ Math courses: {result['math_courses_added']}")
    print(f"✅ Total courses: {result['total_courses_added']}")
    print(f"✅ Tracks updated: {result['tracks_updated']}")
    print(f"✅ Training examples: {len(training_data)}")
    print(f"✅ Timestamp: {result['timestamp']}")
    
    print("\n🎯 KEY CORRECTIONS MADE:")
    print("• CS 38100 timing: Moved to Fall 3rd Year (not early foundation)")
    print("• Track course timing: Start in Fall 3rd Year after foundations")
    print("• Prerequisites: Added proper prerequisite chains")
    print("• Progression sequence: Foundation → Math → Statistics → Tracks")
    print("• MI Track: CS 37300 + AI choice + Stats + 2 electives")
    print("• SE Track: CS 30700 + CS 40800 + CS 40700 + choice + 1 elective")
    
    print("\n🚀 Ready for AI training with corrected progression data!")
    
    return result

if __name__ == "__main__":
    main()