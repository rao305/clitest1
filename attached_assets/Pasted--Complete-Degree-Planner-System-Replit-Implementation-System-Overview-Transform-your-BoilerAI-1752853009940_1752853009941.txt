# Complete Degree Planner System - Replit Implementation

## System Overview
Transform your BoilerAI into a comprehensive degree planner that knows exact requirements, tracks student progress, and creates personalized semester-by-semester plans.

## 1. Exact Track Requirements Database

### A. Machine Intelligence Track Structure
```python
# Complete track requirements database
TRACK_REQUIREMENTS = {
    'machine_intelligence': {
        'total_courses': 6,
        'required_courses': 4,
        'elective_courses': 2,
        'requirements': {
            'core_required': [
                {
                    'course': 'CS 37300',
                    'title': 'Data Mining and Machine Learning',
                    'credits': 3,
                    'description': 'Core MI course - introduction to ML algorithms, data preprocessing, model evaluation',
                    'prerequisites': ['CS 25100', 'STAT 35000'],
                    'mandatory': True
                },
                {
                    'course': 'CS 38100',
                    'title': 'Introduction to Algorithms',
                    'credits': 3,
                    'description': 'Algorithm design and analysis - required for all tracks',
                    'prerequisites': ['CS 25100'],
                    'mandatory': True,
                    'timing': 'Fall Junior Year'
                }
            ],
            'foundation_choice': {
                'description': 'Choose 1 AI foundation course',
                'options': [
                    {
                        'course': 'CS 47100',
                        'title': 'Introduction to Artificial Intelligence',
                        'credits': 3,
                        'description': 'Search algorithms, knowledge representation, machine learning basics',
                        'prerequisites': ['CS 25100']
                    },
                    {
                        'course': 'CS 47300',
                        'title': 'Web Information Search and Management',
                        'credits': 3,
                        'description': 'Information retrieval, web search, text processing',
                        'prerequisites': ['CS 25100']
                    }
                ]
            },
            'stats_choice': {
                'description': 'Choose 1 statistics/probability course',
                'options': [
                    {
                        'course': 'STAT 41600',
                        'title': 'Probability',
                        'credits': 3,
                        'description': 'Mathematical probability theory - more rigorous',
                        'prerequisites': ['MA 26100']
                    },
                    {
                        'course': 'MA 41600',
                        'title': 'Probability',
                        'credits': 3,
                        'description': 'Mathematical probability from math department',
                        'prerequisites': ['MA 26100']
                    },
                    {
                        'course': 'STAT 51200',
                        'title': 'Applied Regression Analysis',
                        'credits': 3,
                        'description': 'Statistical modeling and regression - practical focus',
                        'prerequisites': ['STAT 35000']
                    }
                ]
            },
            'electives': {
                'description': 'Choose 2 elective courses from the following',
                'options': [
                    {
                        'course': 'CS 31100',
                        'title': 'Competitive Programming I',
                        'credits': 1,
                        'description': 'Algorithm contests and problem solving',
                        'prerequisites': ['CS 25100'],
                        'note': 'Can combine with CS 41100 to count as 1 elective'
                    },
                    {
                        'course': 'CS 41100',
                        'title': 'Competitive Programming II',
                        'credits': 2,
                        'description': 'Advanced competitive programming',
                        'prerequisites': ['CS 31100'],
                        'note': 'Must take with CS 31100 to count as 1 elective'
                    },
                    {
                        'course': 'CS 31400',
                        'title': 'Numerical Methods',
                        'credits': 3,
                        'description': 'Computational methods for solving mathematical problems',
                        'prerequisites': ['CS 25100', 'MA 26100']
                    },
                    {
                        'course': 'CS 34800',
                        'title': 'Information Systems',
                        'credits': 3,
                        'description': 'Database systems and information management',
                        'prerequisites': ['CS 25100']
                    },
                    {
                        'course': 'CS 35200',
                        'title': 'Compilers: Principles and Practice',
                        'credits': 3,
                        'description': 'Compiler design and implementation',
                        'prerequisites': ['CS 25100']
                    },
                    {
                        'course': 'CS 43900',
                        'title': 'Introduction to Data Visualization',
                        'credits': 3,
                        'description': 'Data visualization techniques and tools',
                        'prerequisites': ['CS 25100'],
                        'note': 'Cannot take with CS 44000 or CS 47500'
                    },
                    {
                        'course': 'CS 44000',
                        'title': 'Large-Scale Data Analytics',
                        'credits': 3,
                        'description': 'Big data processing and analytics',
                        'prerequisites': ['CS 25100'],
                        'note': 'Cannot take with CS 43900 or CS 47500'
                    },
                    {
                        'course': 'CS 44800',
                        'title': 'Introduction to Relational Database Systems',
                        'credits': 3,
                        'description': 'Database design and SQL',
                        'prerequisites': ['CS 25100']
                    },
                    {
                        'course': 'CS 45600',
                        'title': 'Programming Languages',
                        'credits': 3,
                        'description': 'Programming language concepts and design',
                        'prerequisites': ['CS 25100']
                    },
                    {
                        'course': 'CS 45800',
                        'title': 'Introduction to Robotics',
                        'credits': 3,
                        'description': 'Robotics fundamentals and control',
                        'prerequisites': ['CS 25100', 'MA 26500']
                    },
                    {
                        'course': 'CS 47500',
                        'title': 'Human-Computer Interactions',
                        'credits': 3,
                        'description': 'User interface design and usability',
                        'prerequisites': ['CS 25100'],
                        'note': 'Cannot take with CS 43900 or CS 44000'
                    },
                    {
                        'course': 'CS 48300',
                        'title': 'Introduction to the Theory of Computation',
                        'credits': 3,
                        'description': 'Formal languages and computability',
                        'prerequisites': ['CS 25100']
                    },
                    {
                        'course': 'CS 57700',
                        'title': 'Natural Language Processing',
                        'credits': 3,
                        'description': 'Text processing and language understanding',
                        'prerequisites': ['CS 37300']
                    },
                    {
                        'course': 'CS 57800',
                        'title': 'Statistical Machine Learning',
                        'credits': 3,
                        'description': 'Advanced machine learning theory',
                        'prerequisites': ['CS 37300']
                    }
                ]
            }
        }
    },
    
    'software_engineering': {
        'total_courses': 6,
        'required_courses': 5,
        'elective_courses': 1,
        'requirements': {
            'core_required': [
                {
                    'course': 'CS 30700',
                    'title': 'Software Engineering I',
                    'credits': 3,
                    'description': 'Software development lifecycle and practices',
                    'prerequisites': ['CS 25200'],
                    'mandatory': True
                },
                {
                    'course': 'CS 38100',
                    'title': 'Introduction to Algorithms',
                    'credits': 3,
                    'description': 'Algorithm design and analysis',
                    'prerequisites': ['CS 25100'],
                    'mandatory': True,
                    'timing': 'Fall Junior Year'
                },
                {
                    'course': 'CS 40800',
                    'title': 'Software Testing',
                    'credits': 3,
                    'description': 'Testing methodologies and quality assurance',
                    'prerequisites': ['CS 30700'],
                    'mandatory': True
                },
                {
                    'course': 'CS 40700',
                    'title': 'Software Engineering Senior Project',
                    'credits': 3,
                    'description': 'Capstone software development project',
                    'prerequisites': ['CS 30700'],
                    'mandatory': True,
                    'timing': 'Senior Year'
                }
            ],
            'systems_choice': {
                'description': 'Choose 1 systems course',
                'options': [
                    {
                        'course': 'CS 35200',
                        'title': 'Compilers: Principles and Practice',
                        'credits': 3,
                        'description': 'Compiler design and implementation',
                        'prerequisites': ['CS 25200']
                    },
                    {
                        'course': 'CS 35400',
                        'title': 'Operating Systems',
                        'credits': 3,
                        'description': 'Operating system concepts and design',
                        'prerequisites': ['CS 25200']
                    }
                ]
            },
            'electives': {
                'description': 'Choose 1 elective course',
                'options': [
                    # Similar extensive elective list...
                ]
            }
        }
    }
}
```

## 2. Interactive Degree Planning System

### A. Student Progress Tracker
```python
class StudentProgressTracker:
    def __init__(self, db_path="purdue_cs_knowledge.db"):
        self.db_path = db_path
        self.setup_database()
    
    def setup_database(self):
        """Setup student tracking database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS student_progress (
                student_id TEXT PRIMARY KEY,
                name TEXT,
                year TEXT,
                track TEXT,
                completed_courses TEXT, -- JSON array
                in_progress_courses TEXT, -- JSON array
                planned_courses TEXT, -- JSON array
                selected_track_courses TEXT, -- JSON object
                gpa REAL,
                total_credits INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS semester_plans (
                plan_id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id TEXT,
                semester TEXT, -- Fall 2024, Spring 2025, etc.
                planned_courses TEXT, -- JSON array
                total_credits INTEGER,
                difficulty_score REAL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (student_id) REFERENCES student_progress(student_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def create_student_profile(self, student_id, name, year, track=None):
        """Create new student profile"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO student_progress 
            (student_id, name, year, track, completed_courses, in_progress_courses, planned_courses, selected_track_courses, total_credits)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (student_id, name, year, track, '[]', '[]', '[]', '{}', 0))
        
        conn.commit()
        conn.close()
        return f"Created profile for {name} ({year})"
    
    def get_student_profile(self, student_id):
        """Get student profile"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM student_progress WHERE student_id = ?', (student_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return {
                'student_id': result[0],
                'name': result[1],
                'year': result[2],
                'track': result[3],
                'completed_courses': json.loads(result[4]),
                'in_progress_courses': json.loads(result[5]),
                'planned_courses': json.loads(result[6]),
                'selected_track_courses': json.loads(result[7]),
                'gpa': result[8],
                'total_credits': result[9]
            }
        return None
    
    def update_completed_courses(self, student_id, courses):
        """Update student's completed courses"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE student_progress 
            SET completed_courses = ?, updated_at = CURRENT_TIMESTAMP
            WHERE student_id = ?
        ''', (json.dumps(courses), student_id))
        
        conn.commit()
        conn.close()
    
    def save_track_selections(self, student_id, selections):
        """Save student's track course selections"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE student_progress 
            SET selected_track_courses = ?, updated_at = CURRENT_TIMESTAMP
            WHERE student_id = ?
        ''', (json.dumps(selections), student_id))
        
        conn.commit()
        conn.close()
```

### B. Degree Planning Engine
```python
class DegreePlanningEngine:
    def __init__(self):
        self.tracker = StudentProgressTracker()
        self.track_requirements = TRACK_REQUIREMENTS
    
    def start_degree_planning(self, student_id):
        """Start interactive degree planning session"""
        profile = self.tracker.get_student_profile(student_id)
        
        if not profile:
            return "I need to create your profile first. What's your name and current year?"
        
        if not profile['track']:
            return self.present_track_selection()
        
        return self.assess_current_progress(profile)
    
    def present_track_selection(self):
        """Present available tracks to student"""
        return """🎯 **Choose Your CS Track**

**Most Popular Tracks:**
1. **Machine Intelligence** - AI, Machine Learning, Data Science
2. **Software Engineering** - Large-scale software development

**Other Available Tracks:**
3. Computer Graphics and Visualization
4. Database and Information Systems
5. Algorithmic Foundations
6. Programming Languages
7. Security
8. Systems Software
9. Computational Science and Engineering

**Each track requires 6 courses total**

Which track interests you most? Just tell me the number or name!"""
    
    def setup_machine_intelligence_track(self, student_id):
        """Set up Machine Intelligence track for student"""
        profile = self.tracker.get_student_profile(student_id)
        
        # Update track
        conn = sqlite3.connect(self.tracker.db_path)
        cursor = conn.cursor()
        cursor.execute('UPDATE student_progress SET track = ? WHERE student_id = ?', 
                      ('machine_intelligence', student_id))
        conn.commit()
        conn.close()
        
        return self.present_mi_requirements(profile)
    
    def present_mi_requirements(self, profile):
        """Present Machine Intelligence track requirements"""
        return f"""🤖 **Machine Intelligence Track Requirements**

Hi {profile['name']}! Here's what you need for the MI track:

**📚 REQUIRED COURSES (4 courses):**
1. ✅ CS 37300: Data Mining and Machine Learning *(Core MI course)*
2. ✅ CS 38100: Introduction to Algorithms *(Must take Fall junior year)*
3. 🔄 **Choose 1 AI Foundation Course:**
   - CS 47100: Introduction to Artificial Intelligence
   - CS 47300: Web Information Search and Management
4. 🔄 **Choose 1 Statistics/Probability Course:**
   - STAT 41600: Probability (more mathematical)
   - MA 41600: Probability (from math dept)
   - STAT 51200: Applied Regression Analysis (more applied)

**🎯 ELECTIVE COURSES (Choose 2 from these options):**
- CS 57700: Natural Language Processing
- CS 57800: Statistical Machine Learning
- CS 43900: Data Visualization
- CS 44000: Large-Scale Data Analytics
- CS 47500: Human-Computer Interactions
- CS 31400: Numerical Methods
- CS 45800: Introduction to Robotics
- [Plus several more options...]

**Next Steps:**
1. Tell me which AI foundation course you prefer
2. Tell me which statistics course you prefer  
3. Tell me which 2 electives interest you most

What would you like to choose for your AI foundation course?"""
    
    def handle_course_selection(self, student_id, selection_type, course_choice):
        """Handle student's course selection"""
        profile = self.tracker.get_student_profile(student_id)
        track_req = self.track_requirements[profile['track']]
        
        selections = profile['selected_track_courses']
        
        if selection_type == 'ai_foundation':
            # Validate choice
            valid_options = [course['course'] for course in track_req['requirements']['foundation_choice']['options']]
            if course_choice in valid_options:
                selections['ai_foundation'] = course_choice
                self.tracker.save_track_selections(student_id, selections)
                return f"✅ Great choice! You selected {course_choice} for your AI foundation course.\n\nNow, which statistics course would you like?\n" + self.present_stats_options()
            else:
                return f"Please choose from: {', '.join(valid_options)}"
        
        elif selection_type == 'statistics':
            valid_options = [course['course'] for course in track_req['requirements']['stats_choice']['options']]
            if course_choice in valid_options:
                selections['statistics'] = course_choice
                self.tracker.save_track_selections(student_id, selections)
                return f"✅ Perfect! You selected {course_choice} for statistics.\n\nNow let's choose your 2 electives:\n" + self.present_elective_options()
            else:
                return f"Please choose from: {', '.join(valid_options)}"
        
        elif selection_type == 'electives':
            # Handle elective selection
            return self.handle_elective_selection(student_id, course_choice)
    
    def present_stats_options(self):
        """Present statistics course options"""
        return """📊 **Statistics/Probability Options:**

1. **STAT 41600: Probability** (3 credits)
   - Mathematical probability theory
   - More rigorous mathematical approach
   - Prerequisites: MA 26100 (Multivariate Calculus)

2. **MA 41600: Probability** (3 credits)  
   - Same content as STAT 41600, taught by Math dept
   - Prerequisites: MA 26100

3. **STAT 51200: Applied Regression Analysis** (3 credits)
   - Statistical modeling and regression
   - More applied/practical focus
   - Prerequisites: STAT 35000

**Recommendation:** If you like math theory → STAT 41600. If you prefer applications → STAT 51200.

Which statistics course do you prefer?"""
    
    def present_elective_options(self):
        """Present elective course options"""
        return """🎯 **Choose 2 Electives (Pick your favorites!):**

**🤖 Advanced AI/ML Courses:**
- CS 57700: Natural Language Processing *(Text and language AI)*
- CS 57800: Statistical Machine Learning *(Advanced ML theory)*

**📊 Data Science Courses:**
- CS 43900: Data Visualization *(Present ML results effectively)*
- CS 44000: Large-Scale Data Analytics *(Big data processing)*

**🔬 Applied AI Courses:**
- CS 47500: Human-Computer Interactions *(AI user interfaces)*
- CS 45800: Introduction to Robotics *(AI in robotics)*

**🛠️ Technical Foundation:**
- CS 31400: Numerical Methods *(Computational mathematics)*
- CS 35200: Compilers *(Language processing)*

**💡 Special Options:**
- CS 31100 + CS 41100: Competitive Programming *(Counts as 1 elective)*

**Important:** You can only choose ONE from {CS 43900, CS 44000, CS 47500}

Which 2 electives interest you most?"""
    
    def create_semester_plan(self, student_id):
        """Create semester-by-semester plan"""
        profile = self.tracker.get_student_profile(student_id)
        
        if not profile['selected_track_courses']:
            return "Please complete your course selections first!"
        
        return self.generate_semester_plan(profile)
    
    def generate_semester_plan(self, profile):
        """Generate complete semester plan"""
        completed = profile['completed_courses']
        selections = profile['selected_track_courses']
        
        # Check prerequisites
        prereq_status = self.check_prerequisites(completed)
        
        # Generate plan based on current progress
        plan = f"""📅 **Your Personalized Degree Plan**

**Current Status:**
- Year: {profile['year']}
- Track: Machine Intelligence
- Completed: {len(completed)} courses
- Selected Track Courses: {len(selections)} selections made

**Your Track Course Selections:**
✅ CS 37300: Data Mining and Machine Learning
✅ CS 38100: Introduction to Algorithms
✅ {selections.get('ai_foundation', 'Not selected')}: AI Foundation
✅ {selections.get('statistics', 'Not selected')}: Statistics
✅ Elective 1: {selections.get('elective1', 'Not selected')}
✅ Elective 2: {selections.get('elective2', 'Not selected')}

**Recommended Schedule:**

{self.generate_schedule_by_year(profile, prereq_status)}

**Next Steps:**
1. Verify you've completed foundation courses through CS 25200
2. Register for CS 38100 in Fall junior year (MANDATORY timing)
3. Take statistics course when prerequisites are met
4. Plan electives for junior/senior year

Would you like me to check specific prerequisites or create a detailed semester schedule?"""
        
        return plan
    
    def generate_schedule_by_year(self, profile, prereq_status):
        """Generate year-by-year schedule"""
        if profile['year'] == 'sophomore':
            return """**Fall Junior Year (CRITICAL):**
- CS 38100: Introduction to Algorithms (MANDATORY)
- STAT 35000: Elementary Statistics (if needed for prerequisites)
- CS 37300: Data Mining and Machine Learning (if prerequisites met)

**Spring Junior Year:**
- Your selected AI foundation course
- First elective course
- Continue with any remaining foundation courses

**Senior Year:**
- Complete remaining track courses
- Second elective course
- Advanced courses as needed"""
        
        elif profile['year'] == 'junior':
            return """**This Semester:**
- CS 38100: Introduction to Algorithms (if not taken)
- CS 37300: Data Mining and Machine Learning
- Statistics course (if prerequisites met)

**Next Semester:**
- AI foundation course
- First elective

**Senior Year:**
- Complete remaining track courses
- Second elective"""
        
        else:
            return """**Remaining Semesters:**
- Complete all 6 track courses
- Focus on advanced electives
- Consider research opportunities"""
    
    def check_prerequisites(self, completed_courses):
        """Check prerequisite status for track courses"""
        required_foundation = ['CS 18000', 'CS 18200', 'CS 24000', 'CS 25000', 'CS 25100', 'CS 25200']
        
        missing_foundation = [course for course in required_foundation if course not in completed_courses]
        
        return {
            'foundation_complete': len(missing_foundation) == 0,
            'missing_foundation': missing_foundation,
            'can_take_tracks': 'CS 25200' in completed_courses,
            'can_take_cs38100': 'CS 25100' in completed_courses,
            'can_take_cs37300': 'CS 25100' in completed_courses and 'STAT 35000' in completed_courses
        }
```

## 3. Conversational Interface

### A. Main Query Handler
```python
class DegreePlannerBot:
    def __init__(self):
        self.planner = DegreePlanningEngine()
        self.current_session = {}
        
    def process_query(self, query, student_id="default_student"):
        """Process user queries for degree planning"""
        query_lower = query.lower().strip()
        
        # Initialize session if needed
        if student_id not in self.current_session:
            self.current_session[student_id] = {'stage': 'initial', 'context': {}}
        
        session = self.current_session[student_id]
        
        # Handle different conversation stages
        if 'machine learning' in query_lower or 'ai' in query_lower or 'ml' in query_lower:
            return self.handle_ml_track_inquiry(student_id, query)
        
        elif 'what is cs' in query_lower:
            return self.handle_course_info_query(query)
        
        elif any(word in query_lower for word in ['choose', 'select', 'pick', 'want']):
            return self.handle_course_selection(student_id, query)
        
        elif 'plan' in query_lower or 'schedule' in query_lower:
            return self.planner.create_semester_plan(student_id)
        
        elif 'requirements' in query_lower:
            return self.handle_requirements_query(student_id)
        
        else:
            return self.handle_general_query(query)
    
    def handle_ml_track_inquiry(self, student_id, query):
        """Handle machine learning track inquiries"""
        profile = self.planner.tracker.get_student_profile(student_id)
        
        if not profile:
            # Create profile
            self.planner.tracker.create_student_profile(student_id, "Student", "sophomore")
            return """Welcome to BoilerAI! I'm your degree planning assistant.

To help you plan your Machine Learning focus, I need to know:
1. What's your name?
2. What year are you? (freshman, sophomore, junior, senior)

After that, I'll show you the exact Machine Intelligence track requirements and help you choose your courses!"""
        
        if profile['track'] != 'machine_intelligence':
            return self.planner.setup_machine_intelligence_track(student_id)
        
        return self.planner.present_mi_requirements(profile)
    
    def handle_course_selection(self, student_id, query):
        """Handle course selection responses"""
        query_lower = query.lower()
        
        # Extract course codes
        course_match = re.search(r'cs\s*(\d{5})', query_lower)
        if course_match:
            course_code = f'CS {course_match.group(1)}'
        else:
            # Try to match by name
            course_code = self.extract_course_by_name(query)
        
        # Determine selection type based on context
        if 'ai' in query_lower or 'artificial intelligence' in query_lower:
            return self.planner.handle_course_selection(student_id, 'ai_foundation', course_code)
        elif 'stat' in query_lower or 'probability' in query_lower:
            return self.planner.handle_course_selection(student_id, 'statistics', course_code)
        elif 'elective' in query_lower:
            return self.planner.handle_course_selection(student_id, 'electives', course_code)
        
        return f"I detected you want to choose {course_code}. Can you specify if this is for:\n1. AI foundation course\n2. Statistics course\n3. Elective course"
    
    def handle_requirements_query(self, student_id):
        """Handle questions about track requirements"""
        profile = self.planner.tracker.get_student_profile(student_id)
        
        if not profile or profile['track'] != 'machine_intelligence':
            return "Let me set up your Machine Intelligence track first!\n\n" + self.planner.setup_machine_intelligence_track(student_id)
        
        selections = profile['selected_track_courses']
        
        return f"""🤖 **Machine Intelligence Track - Your Progress**

**REQUIRED COURSES (4 total):**
✅ CS 37300: Data Mining and Machine Learning
✅ CS 38100: Introduction to Algorithms
{'✅' if selections.get('ai_foundation') else '🔄'} AI Foundation: {selections.get('ai_foundation', 'Not selected yet')}
{'✅' if selections.get('statistics') else '🔄'} Statistics: {selections.get('statistics', 'Not selected yet')}

**ELECTIVE COURSES (2 total):**
{'✅' if selections.get('elective1') else '🔄'} Elective 1: {selections.get('elective1', 'Not selected yet')}
{'✅' if selections.get('elective2') else '🔄'} Elective 2: {selections.get('elective2', 'Not selected yet')}

**Total Progress:** {len([v for v in selections.values() if v])} of 6 courses selected

{self.get_next_selection_step(selections)}"""
    
    def get_next_selection_step(self, selections):
        """Get next step in selection process"""
        if not selections.get('ai_foundation'):
            return "\n**Next:** Choose your AI foundation course (CS 47100 or CS 47300)"
        elif not selections.get('statistics'):
            return "\n**Next:** Choose your statistics course (STAT 41600, MA 41600, or STAT 51200)"
        elif not selections.get('elective1'):
            return "\n**Next:** Choose your first elective course"
        elif not selections.get('elective2'):
            return "\n**Next:** Choose your second elective course"
        else:
            return "\n**🎉 All courses selected! Ready to create your semester plan!**"
```

## 4. Main Application

### A. CLI Interface
```python
def main():
    bot = DegreePlannerBot()
    
    print("🎓 BoilerAI - Degree Planning Assistant")
    print("I'll help you plan your CS degree step by step!")
    print("Type 'quit' to exit\n")
    
    student_id = input("Enter your student ID (or press Enter for demo): ").strip()
    if not student_id:
        student_id = "demo_student"
    
    while True:
        query = input(f"\nYou: ").strip()
        
        if query.lower() in ['quit', 'exit']:
            print("Good luck with your degree planning! 🎉")
            break
        
        if not query:
            continue
        
        response = bot.process_query(query, student_id)
        print(f"\n🎯 BoilerAI: {response}")

if __name__ == "__main__":
    main()
```

## 5. Example Conversation Flow

```
🎓 BoilerAI - Degree Planning Assistant
Enter your student ID: demo123

You: I want to concentrate in machine learning

🎯 BoilerAI: 🤖 Machine Intelligence Track Requirements

Hi Student! Here's what you need for the MI track:

📚 REQUIRED COURSES (4 courses):
1. ✅ CS 37300: Data Mining and Machine Learning
2. ✅ CS 38100: Introduction to Algorithms
3. 🔄 Choose 1 AI Foundation Course:
   - CS 47100: Introduction to Artificial Intelligence
   - CS 47300: Web Information Search and Management
4. 🔄 Choose 1 Statistics Course:
   - STAT 41600: Probability
   - MA 41600: Probability  
   - STAT 51200: Applied Regression Analysis

🎯 ELECTIVE COURSES (Choose 2):
- CS 57700: Natural Language Processing
- CS 57800: Statistical Machine Learning
- [more options...]

What would you like to choose for your AI foundation course?

You: I want CS 47100

🎯 BoilerAI: ✅ Great choice! You selected CS 47100 for your AI foundation course.

Now, which statistics course would you like?

📊 Statistics/Probability Options:
1. STAT 41600: Probability (mathematical)
2. MA 41600: Probability (math dept)
3. STAT 51200: Applied Regression Analysis (applied)

Which statistics course do you prefer?

You: STAT 41600

🎯 BoilerAI: ✅ Perfect! You selected STAT 41600 for statistics.

Now let's choose your 2 electives:

🎯 Choose 2 Electives:
🤖 Advanced AI/ML Courses:
- CS 57700: Natural Language Processing
- CS 57800: Statistical Machine Learning

📊 Data Science Courses:
- CS 43900: Data Visualization
- CS 44000: Large-Scale Data Analytics

Which 2 electives interest you most?

You: CS 57700 and CS 43900

🎯 BoilerAI: 🎉 Excellent choices! Your Machine Intelligence track is complete:

✅ CS 37300: Data Mining and Machine Learning
✅ CS 38100: Introduction to Algorithms  
✅ CS 47100: Introduction to Artificial Intelligence
✅ STAT 41600: Probability
✅ CS 57700: Natural Language Processing
✅ CS 43900: Data Visualization

Ready to create your semester plan! What year are you currently?

You: I'm a sophomore

🎯 BoilerAI: 📅 Your Personalized Degree Plan

Fall Junior Year (CRITICAL):
- CS 38100: Introduction to Algorithms (MANDATORY)
- STAT 35000: Elementary Statistics (prerequisite)
- CS 37300: Data Mining and Machine Learning

Spring Junior Year:
- CS 47100: Introduction to Artificial Intelligence
- STAT 41600: Probability
- Other coursework

Senior Year:
- CS 57700: Natural Language Processing
- CS 43900: Data Visualization
- Complete remaining requirements

Would you like me to check your prerequisites or create a detailed schedule?
```

This system provides **exactly** what you need:
- ✅ Knows exact track requirements (4 required + 2 electives)
- ✅ Presents course options for user to choose from
- ✅ Tracks selections and progress
- ✅ Creates personalized semester plans
- ✅ Handles prerequisites and timing requirements
- ✅ Provides detailed course information
- ✅ Guides students through the entire process

The system works as a **real degree planner** that helps students make informed decisions about their academic path!